syntax = "proto3";

package ibc.lightclients.near.v1;

option go_package = "github.com/cosmos/ibc-go/v3/modules/light-clients/13-near/types";

import "google/protobuf/timestamp.proto";

import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all)        = false;
option (gogoproto.unmarshaler_all)      = false;
option (gogoproto.sizer_all)            = false;
option (gogoproto.goproto_registration) = true;
option (gogoproto.protosizer_all)       = false;

// ClientState from Near tracks its head, {current, next} x {epoch, validators}
message ClientState {
  option (gogoproto.goproto_getters) = false;

  // LightClientBlockView contains most of the state needed to validate
  // a future state transition
  LightClientBlockView head = 1;

  // CyrptoHash representing the current epoch
  bytes current_epoch = 2;

  // CyrptoHash representing the next epoch
  bytes next_epoch = 3;

  // Tracks the set of validators that will vote on blocks in the current epoch
  repeated ValidatorStakeView current_validators = 4;

  // Tracks the set of validators that will vote on blocks in the next epoch
  repeated ValidatorStakeView next_validators = 5;
}

// LightClientBlockView contains most of the state needed to validate
// a future state transition
message LightClientBlockView {
  bytes                       prev_block_hash       = 1;
  bytes                       next_block_inner_hash = 2;
  BlockHeaderInnerLiteView    inner_lite            = 3;
  bytes                       inner_rest_hash       = 4;
  optional ValidatorStakeView next_bps              = 5;
  repeated MaybeSignature     approvals_after_next  = 6;
}

// BlockHeaderInnerLiteView for the current head (which contains height, epoch_id,
// next_epoch_id, prev_state_root, outcome_root, timestamp, the hash of the block
// producers set for the next epoch next_bp_hash, and the merkle root of all
// the block hashes block_merkle_root);
message BlockHeaderInnerLiteView {
  uint64 block_height      = 1;
  bytes  epoch_id          = 2;
  bytes  next_epoch_id     = 3;
  bytes  prev_state_root   = 4;
  bytes  outcome_root      = 5;
  uint64 timestamp         = 6;
  uint64 timestamp_nanosec = 7;
  bytes  next_bp_hash      = 8;
  bytes  block_merkle_root = 9;
}

// Wrapper type over a signature to be able to presenent Option<Signature> inside a Vector
message MaybeSignature {
  // Encoded signature of scheme `Ed25519`
  optional bytes Signature = 1;
}

// Represents a validator stake state that helps verifying whether a vote is valid or not
// and if consensus is reached.
message ValidatorStakeView {
  uint32 version    = 1;
  string account_id = 2;
  bytes  public_key = 3;
  // NOTE: balance is a u128
  bytes balance = 4;
}

// ConsensusState defines the consensus state from Tendermint.
message ConsensusState {
  option (gogoproto.goproto_getters) = false;

  // timestamp that corresponds to the block height in which the ConsensusState
  // was stored.
  google.protobuf.Timestamp timestamp = 1 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];

  // packet commitment root
  bytes root = 2;
}

// Misbehaviour is a wrapper over two conflicting Headers
// that implements Misbehaviour interface expected by ICS-02
message Misbehaviour {
  option (gogoproto.goproto_getters) = false;

  Header header_1 = 2 [(gogoproto.customname) = "Header1", (gogoproto.moretags) = "yaml:\"header_1\""];
  Header header_2 = 3 [(gogoproto.customname) = "Header2", (gogoproto.moretags) = "yaml:\"header_2\""];
}

// Header contains the neccessary data to proove finality about IBC commitments
message Header {
  option (gogoproto.goproto_getters) = false;

  LightClientBlockView inner = 1;
}
