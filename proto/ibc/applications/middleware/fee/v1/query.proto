syntax = "proto3";

package ibc.applications.middleware.fee.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "ibc/applications/middleware/fee/v1/fee.proto";
import "google/api/annotations.proto";
import "ibc/core/channel/v1/channel.proto";

option go_package = "github.com/cosmos/ibc-go/modules/apps/29-fee/types";

// Query provides defines the gRPC querier service.
service Query {
  // Gets the fee expected for submitting ReceivePacket msg for the given packet
  rpc ReceiveFee(QueryReceiveFeeRequest) returns (QueryReceiveFeeResponse) {
    option (google.api.http).get = "/ibc/apps/middleware/fee/v1/receive_fee";
  }

  // Gets the fee expected for submitting AcknowledgePacket msg for the given packet
  rpc AckFee(QueryAckFeeRequest) returns (QueryAckFeeResponse) {
    option (google.api.http).get = "/ibc/apps/middleware/fee/v1/ack_fee";
  }

  // Gets the fee expected for submitting TimeoutPacket msg for the given packet
  rpc TimeoutFee(QueryTimeoutFeeRequest) returns (QueryTimeoutFeeResponse) {
    option (google.api.http).get = "/ibc/apps/middleware/fee/v1/timeout_fee";
  }
}

// QueryReceiveRequestFee is the request type for quering the receive fee
message QueryReceiveFeeRequest {
  // PacketID
  ibc.core.channel.v1.PacketId packet_id = 1 [(gogoproto.moretags) = "yaml:\"relayer_address\""];
  // Caller should provide the intended relayer address in case the fee is dependent on specific relayer(s).
  string relayer_address = 4 [(gogoproto.moretags) = "yaml:\"relayer_address\""];
}

// QueryReceiveFeeResponse is the response type for the ReceiveFee RPC
message QueryReceiveFeeResponse {
  ibc.applications.middleware.fee.v1.Fee fee = 1 [(gogoproto.moretags) = "yaml:\"fee\""];
}

// QueryAckFeeRequest is the request type for querying the acknowledgement fee
message QueryAckFeeRequest {
  // PacketID
  ibc.core.channel.v1.PacketId packet_id = 1 [(gogoproto.moretags) = "yaml:\"relayer_address\""];
  // Caller should provide the intended relayer address in case the fee is dependent on specific relayer(s).
  string relayer_address = 4 [(gogoproto.moretags) = "yaml:\"relayer_address\""];
}

// QueryAckFeeResponse is the response type for the AckFee RPC
message QueryAckFeeResponse {
  ibc.applications.middleware.fee.v1.Fee fee = 1 [(gogoproto.moretags) = "yaml:\"fee\""];
}

// QueryTimeoutFeeRequest is the request type for querying the timeout fee
message QueryTimeoutFeeRequest {
  // PacketID
  ibc.core.channel.v1.PacketId packet_id = 1 [(gogoproto.moretags) = "yaml:\"relayer_address\""];
  // Caller should provide the intended relayer address in case the fee is dependent on specific relayer(s).
  string relayer_address = 4 [(gogoproto.moretags) = "yaml:\"relayer_address\""];
}

// QueryTimeoutFeeResponse is the response type for the timeout RPC
message QueryTimeoutFeeResponse {
  ibc.applications.middleware.fee.v1.Fee fee = 1 [(gogoproto.moretags) = "yaml:\"fee\""];
}
