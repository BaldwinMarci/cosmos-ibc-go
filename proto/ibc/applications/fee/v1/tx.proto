syntax = "proto3";

package ibc.applications.fee.v1;

import "gogoproto/gogo.proto";
import "ibc/applications/fee/v1/fee.proto";
import "ibc/core/channel/v1/channel.proto";
option go_package = "github.com/cosmos/ibc-go/modules/apps/29-fee/types";

// Msg defines the ibc/fee Msg service.
service Msg {
  // RegisterCounterpartyAddress defines a rpc handler method for MsgRegisterCounterpartyAddress
  // RegisterCounterpartyAddress is called by the relayer on each channelEnd and allows them to specify their
  // counterparty address before relaying. This ensures they will be properly compensated for forward relaying since
  // destination chain must send back relayer's source address (counterparty address) in acknowledgement. This function
  // may be called more than once by a relayer, in which case, latest counterparty address is always used.
  rpc RegisterCounterpartyAddress(MsgRegisterCounterpartyAddress) returns (MsgRegisterCounterpartyAddressResponse);
  // PayPacketFee defines a rpc handler method for MsgPayPacketFee
  // PayPacketFee is an open callback that may be called by any module/user that wishes to escrow funds in order to
  // incentivize the relaying of the given packet.
  rpc PayPacketFee(MsgPayPacketFee) returns (MsgPayPacketFeeResponse);
  // PayPacketFee defines a rpc handler method for MsgPayPacketFee
  // PayPacketFee is an open callback that may be called by any module/user that wishes to escrow funds in order to
  // incentivize the relaying of the given packet.
  rpc PayPacketFeeAsync(MsgPayPacketFeeAsync) returns (MsgPayPacketFeeAsyncResponse);
}

// MsgRegisterCounterpartyAddress is the request type for registering the counter party address
message MsgRegisterCounterpartyAddress {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string address              = 1;
  string counterparty_address = 2 [(gogoproto.moretags) = "yaml:\"counterparty_address\""];
}

// MsgRegisterCounterpartyAddressResponse defines the Msg/RegisterCounterypartyAddress response type
message MsgRegisterCounterpartyAddressResponse {}

// MsgEscrowPacketFee defines the request type EscrowPacketFee RPC
message MsgPayPacketFee {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  ibc.applications.fee.v1.Fee fee = 1;
  // source channel port identifier
  string source_port_id = 2 [(gogoproto.moretags) = "yaml:\"source_port_id\""];
  // source channel unique identifier
  string          source_channel_id = 3 [(gogoproto.moretags) = "yaml:\"source_channel_id\""];
  repeated string relayers          = 4;
}

// MsgEscrowPacketFeeResponse defines the response type for Msg/EscrowPacketFee
message MsgPayPacketFeeResponse {}

// MsgEscrowPacketFeeAsync defines the request type EscrowPacketFeeAsync RPC
message MsgPayPacketFeeAsync {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  ibc.applications.fee.v1.Fee  fee       = 1;
  ibc.core.channel.v1.PacketId packet_id = 2 [(gogoproto.moretags) = "yaml:\"packet_id\""];
  repeated string              relayers  = 3;
}

// MsgEscrowPacketFeeAsyncResponse defines the response type for Msg/EscrowPacketFeeAsync
message MsgPayPacketFeeAsyncResponse {}
