syntax = "proto3";

package ibc.applications.fee.v1;

option go_package = "github.com/cosmos/ibc-go/v3/modules/apps/29-fee/types";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "ibc/applications/fee/v1/fee.proto";
import "ibc/core/channel/v1/channel.proto";

// Query provides defines the gRPC querier service.
service Query {
  // Gets all incentivized packets
  rpc IncentivizedPackets(QueryIncentivizedPacketsRequest) returns (QueryIncentivizedPacketsResponse) {
    option (google.api.http).get = "/ibc/apps/fee/v1/incentivized_packets";
  }

  // Gets the fees expected for submitting the ReceivePacket, AcknowledgementPacket, and TimeoutPacket messages for the
  // given packet
  rpc IncentivizedPacket(QueryIncentivizedPacketRequest) returns (QueryIncentivizedPacketResponse) {
    option (google.api.http).get =
        "/ibc/apps/fee/v1/incentivized_packet/port/{packet_id.port_id}/channel/{packet_id.channel_id}/sequence/"
        "{packet_id.sequence}";
  }

  // TotalRecvFees returns the total receive fees for a packet given its identifier
  rpc TotalRecvFees(QueryTotalRecvFeesRequest) returns (QueryTotalRecvFeesResponse) {
    option (google.api.http).get = "/ibc/apps/fee/v1/total_recv_fees/port/{packet_id.port_id}/channel/"
                                   "{packet_id.channel_id}/sequence/{packet_id.sequence}";
  }

  // TotalAckFees returns the total acknowledgement fees for a packet given its identifier
  rpc TotalAckFees(QueryTotalAckFeesRequest) returns (QueryTotalAckFeesResponse) {
    option (google.api.http).get = "/ibc/apps/fee/v1/total_ack_fees/port/{packet_id.port_id}/channel/"
                                   "{packet_id.channel_id}/sequence/{packet_id.sequence}";
  }

  // TotalTimeoutFees returns the total timeout fees for a packet given its identifier
  rpc TotalTimeoutFees(QueryTotalTimeoutFeesRequest) returns (QueryTotalTimeoutFeesResponse) {
    option (google.api.http).get = "/ibc/apps/fee/v1/total_timeout_fees/port/{packet_id.port_id}/channel/"
                                   "{packet_id.channel_id}/sequence/{packet_id.sequence}";
  }
}

// QueryIncentivizedPacketsRequest is the request type for querying for all incentivized packets
message QueryIncentivizedPacketsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // Height to query at
  uint64 query_height = 2;
}

// QueryIncentivizedPacketsResponse is the response type for the incentivized packets RPC
message QueryIncentivizedPacketsResponse {
  // Map of all incentivized_packets
  repeated ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packets = 1 [(gogoproto.nullable) = false];
}

// QueryIncentivizedPacketRequest is the request type for querying for all incentivized packets
message QueryIncentivizedPacketRequest {
  // PacketID
  ibc.core.channel.v1.PacketId packet_id = 1 [(gogoproto.nullable) = false];
  // Height to query at
  uint64 query_height = 2;
}

// QueryIncentivizedPacketsResponse is the response type for the incentivized packet RPC
message QueryIncentivizedPacketResponse {
  // Incentivized_packet
  ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packet = 1 [(gogoproto.nullable) = false];
}

// QueryTotalRecvFeesRequest defines the request type for the TotalRecvFees rpc
message QueryTotalRecvFeesRequest {
  // the packet identifier for the associated fees
  ibc.core.channel.v1.PacketId packet_id = 1 [(gogoproto.nullable) = false];
}

// QueryTotalRecvFeesResponse defines the response type for the TotalRecvFees rpc
message QueryTotalRecvFeesResponse {
  // the total packet receive fees
  repeated cosmos.base.v1beta1.Coin recv_fees = 1 [
    (gogoproto.moretags)     = "yaml:\"recv_fees\"",
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// QueryTotalAckFeesRequest defines the request type for the TotalAckFees rpc
message QueryTotalAckFeesRequest {
  // the packet identifier for the associated fees
  ibc.core.channel.v1.PacketId packet_id = 1 [(gogoproto.nullable) = false];
}

// QueryTotalAckFeesResponse defines the response type for the TotalAckFees rpc
message QueryTotalAckFeesResponse {
  // the total packet receive fees
  repeated cosmos.base.v1beta1.Coin ack_fees = 1 [
    (gogoproto.moretags)     = "yaml:\"ack_fees\"",
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// QueryTotalTimeoutFeesRequest defines the request type for the TotalTimeoutFees rpc
message QueryTotalTimeoutFeesRequest {
  // the packet identifier for the associated fees
  ibc.core.channel.v1.PacketId packet_id = 1 [(gogoproto.nullable) = false];
}

// QueryTotalTimeoutFeesResponse defines the response type for the TotalTimeoutFees rpc
message QueryTotalTimeoutFeesResponse {
  // the total packet receive fees
  repeated cosmos.base.v1beta1.Coin timeout_fees = 1 [
    (gogoproto.moretags)     = "yaml:\"timeout_fees\"",
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}
