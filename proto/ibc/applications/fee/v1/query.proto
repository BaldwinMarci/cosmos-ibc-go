syntax = "proto3";

package ibc.applications.fee.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "ibc/applications/fee/v1/fee.proto";
import "google/api/annotations.proto";
import "ibc/core/channel/v1/channel.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/cosmos/ibc-go/modules/apps/29-fee/types";

// Query provides defines the gRPC querier service.
service Query {
  // Gets the fee expected for submitting ReceivePacket msg for the given packet
  rpc ReceiveFee(QueryReceiveFeeRequest) returns (QueryReceiveFeeResponse) {
    option (google.api.http).get =
        "/ibc/apps/fee/v1/receive_fee/port/{packet_id.port_id}/channel/{packet_id.channel_id}/sequence/"
        "{packet_id.sequence}/relayer/{relayer_address}/height/{query_height}";
  }

  // Gets the fee expected for submitting AcknowledgePacket msg for the given packet
  rpc AckFee(QueryAckFeeRequest) returns (QueryAckFeeResponse) {
    option (google.api.http).get =
        "/ibc/apps/fee/v1/ack_fee/port/{packet_id.port_id}/channel/{packet_id.channel_id}/sequence/"
        "{packet_id.sequence}/relayer/{relayer_address}/height/{query_height}";
  }

  // Gets the fee expected for submitting TimeoutPacket msg for the given packet
  rpc TimeoutFee(QueryTimeoutFeeRequest) returns (QueryTimeoutFeeResponse) {
    option (google.api.http).get =
        "/ibc/apps/fee/v1/timeout_fee/port/{packet_id.port_id}/channel/{packet_id.channel_id}/sequence/"
        "{packet_id.sequence}/{relayer_address}/height/{query_height}";
  }

  // Gets all incentivized packets
  rpc IncentivizedPackets(QueryIncentivizedPacketsRequest) returns (QueryIncentivizedPacketsResponse) {
    option (google.api.http).get = "/ibc/apps/fee/v1/incentivized_packets/height/{query_height}";
  }

  // Gets the specified incentivized packet
  rpc IncentivizedPacket(QueryIncentivizedPacketRequest) returns (QueryIncentivizedPacketResponse) {
    option (google.api.http).get =
        "/ibc/apps/fee/v1/incentivized_packet/port/{packet_id.port_id}/channel/{packet_id.channel_id}/sequence/"
        "{packet_id.sequence}/height/{query_height}";
  }
}

// QueryReceiveFeeRequest is the request type for querying the receive fee
message QueryReceiveFeeRequest {
  // PacketID
  ibc.core.channel.v1.PacketId packet_id = 1 [(gogoproto.moretags) = "yaml:\"packet_id\""];
  // Caller should provide the intended relayer address in case the fee is dependent on specific relayer(s).
  string relayer_address = 2 [(gogoproto.moretags) = "yaml:\"relayer_address\""];
  // Height to query at
  uint64 query_height = 3 [(gogoproto.moretags) = "yaml:\"query_height\""];
}

// QueryReceiveFeeResponse is the response type for the ReceiveFee RPC
message QueryReceiveFeeResponse {
  ibc.applications.fee.v1.Fee fee = 1;
}

// QueryAckFeeRequest is the request type for querying the acknowledgement fee
message QueryAckFeeRequest {
  // PacketID
  ibc.core.channel.v1.PacketId packet_id = 1 [(gogoproto.moretags) = "yaml:\"packet_id\""];
  // Caller should provide the intended relayer address in case the fee is dependent on specific relayer(s).
  string relayer_address = 2 [(gogoproto.moretags) = "yaml:\"relayer_address\""];
  // Height to query at
  uint64 query_height = 3 [(gogoproto.moretags) = "yaml:\"query_height\""];
}

// QueryAckFeeResponse is the response type for the AckFee RPC
message QueryAckFeeResponse {
  ibc.applications.fee.v1.Fee fee = 1;
}

// QueryTimeoutFeeRequest is the request type for querying the timeout fee
message QueryTimeoutFeeRequest {
  // PacketID
  ibc.core.channel.v1.PacketId packet_id = 1 [(gogoproto.moretags) = "yaml:\"packet_id\""];
  // Caller should provide the intended relayer address in case the fee is dependent on specific relayer(s).
  string relayer_address = 2 [(gogoproto.moretags) = "yaml:\"relayer_address\""];
  // Height to query at
  uint64 query_height = 3 [(gogoproto.moretags) = "yaml:\"query_height\""];
}

// QueryTimeoutFeeResponse is the response type for the timeout RPC
message QueryTimeoutFeeResponse {
  ibc.applications.fee.v1.Fee fee = 1;
}

// QueryIncentivizedPacketsRequest is the request type for querying for all incentivized packets
message QueryIncentivizedPacketsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // Height to query at
  uint64 query_height = 2 [(gogoproto.moretags) = "yaml:\"query_height\""];
}

// QueryIncentivizedPacketsResponse is the response type for the incentivized packets RPC
message QueryIncentivizedPacketsResponse {
  // Map of all incentivized_packets
  repeated ibc.applications.fee.v1.IdentifiedPacketFee incentivized_packets = 1
      [(gogoproto.moretags) = "yaml:\"incentivized_packets\""];
}

// QueryIncentivizedPacketRequest is the request type for querying for all incentivized packets
message QueryIncentivizedPacketRequest {
  // PacketID
  ibc.core.channel.v1.PacketId packet_id = 1 [(gogoproto.moretags) = "yaml:\"packet_id\""];
  // Height to query at
  uint64 query_height = 2 [(gogoproto.moretags) = "yaml:\"query_height\""];
}

// QueryIncentivizedPacketsResponse is the response type for the incentivized packet RPC
message QueryIncentivizedPacketResponse {
  // Incentivized_packet
  ibc.applications.fee.v1.IdentifiedPacketFee incentivized_packet = 1
      [(gogoproto.moretags) = "yaml:\"incentivized_packet\""];
}
