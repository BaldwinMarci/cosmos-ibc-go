// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/middleware/fee/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	types "github.com/cosmos/ibc-go/modules/core/04-channel/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryReceiveRequestFee is the request type for quering the receive fee
type QueryReceiveFeeRequest struct {
	// PacketID
	PacketId *types.PacketId `protobuf:"bytes,1,opt,name=packet_id,json=packetId,proto3" json:"packet_id,omitempty" yaml:"packet_id"`
	// Caller should provide the intended relayer address in case the fee is dependent on specific relayer(s).
	RelayerAddress string `protobuf:"bytes,2,opt,name=relayer_address,json=relayerAddress,proto3" json:"relayer_address,omitempty" yaml:"relayer_address"`
	// Height to query at
	QueryHeight uint64 `protobuf:"varint,3,opt,name=query_height,json=queryHeight,proto3" json:"query_height,omitempty" yaml:"query_height"`
}

func (m *QueryReceiveFeeRequest) Reset()         { *m = QueryReceiveFeeRequest{} }
func (m *QueryReceiveFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReceiveFeeRequest) ProtoMessage()    {}
func (*QueryReceiveFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cafe0e1bd8b928c, []int{0}
}
func (m *QueryReceiveFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReceiveFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReceiveFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReceiveFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReceiveFeeRequest.Merge(m, src)
}
func (m *QueryReceiveFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReceiveFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReceiveFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReceiveFeeRequest proto.InternalMessageInfo

func (m *QueryReceiveFeeRequest) GetPacketId() *types.PacketId {
	if m != nil {
		return m.PacketId
	}
	return nil
}

func (m *QueryReceiveFeeRequest) GetRelayerAddress() string {
	if m != nil {
		return m.RelayerAddress
	}
	return ""
}

func (m *QueryReceiveFeeRequest) GetQueryHeight() uint64 {
	if m != nil {
		return m.QueryHeight
	}
	return 0
}

// QueryReceiveFeeResponse is the response type for the ReceiveFee RPC
type QueryReceiveFeeResponse struct {
	Fee *Fee `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *QueryReceiveFeeResponse) Reset()         { *m = QueryReceiveFeeResponse{} }
func (m *QueryReceiveFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReceiveFeeResponse) ProtoMessage()    {}
func (*QueryReceiveFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cafe0e1bd8b928c, []int{1}
}
func (m *QueryReceiveFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReceiveFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReceiveFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReceiveFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReceiveFeeResponse.Merge(m, src)
}
func (m *QueryReceiveFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReceiveFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReceiveFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReceiveFeeResponse proto.InternalMessageInfo

func (m *QueryReceiveFeeResponse) GetFee() *Fee {
	if m != nil {
		return m.Fee
	}
	return nil
}

// QueryAckFeeRequest is the request type for querying the acknowledgement fee
type QueryAckFeeRequest struct {
	// PacketID
	PacketId *types.PacketId `protobuf:"bytes,1,opt,name=packet_id,json=packetId,proto3" json:"packet_id,omitempty" yaml:"packet_id"`
	// Caller should provide the intended relayer address in case the fee is dependent on specific relayer(s).
	RelayerAddress string `protobuf:"bytes,2,opt,name=relayer_address,json=relayerAddress,proto3" json:"relayer_address,omitempty" yaml:"relayer_address"`
	// Height to query at
	QueryHeight uint64 `protobuf:"varint,3,opt,name=query_height,json=queryHeight,proto3" json:"query_height,omitempty" yaml:"query_height"`
}

func (m *QueryAckFeeRequest) Reset()         { *m = QueryAckFeeRequest{} }
func (m *QueryAckFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAckFeeRequest) ProtoMessage()    {}
func (*QueryAckFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cafe0e1bd8b928c, []int{2}
}
func (m *QueryAckFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAckFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAckFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAckFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAckFeeRequest.Merge(m, src)
}
func (m *QueryAckFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAckFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAckFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAckFeeRequest proto.InternalMessageInfo

func (m *QueryAckFeeRequest) GetPacketId() *types.PacketId {
	if m != nil {
		return m.PacketId
	}
	return nil
}

func (m *QueryAckFeeRequest) GetRelayerAddress() string {
	if m != nil {
		return m.RelayerAddress
	}
	return ""
}

func (m *QueryAckFeeRequest) GetQueryHeight() uint64 {
	if m != nil {
		return m.QueryHeight
	}
	return 0
}

// QueryAckFeeResponse is the response type for the AckFee RPC
type QueryAckFeeResponse struct {
	Fee *Fee `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *QueryAckFeeResponse) Reset()         { *m = QueryAckFeeResponse{} }
func (m *QueryAckFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAckFeeResponse) ProtoMessage()    {}
func (*QueryAckFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cafe0e1bd8b928c, []int{3}
}
func (m *QueryAckFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAckFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAckFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAckFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAckFeeResponse.Merge(m, src)
}
func (m *QueryAckFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAckFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAckFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAckFeeResponse proto.InternalMessageInfo

func (m *QueryAckFeeResponse) GetFee() *Fee {
	if m != nil {
		return m.Fee
	}
	return nil
}

// QueryTimeoutFeeRequest is the request type for querying the timeout fee
type QueryTimeoutFeeRequest struct {
	// PacketID
	PacketId *types.PacketId `protobuf:"bytes,1,opt,name=packet_id,json=packetId,proto3" json:"packet_id,omitempty" yaml:"packet_id"`
	// Caller should provide the intended relayer address in case the fee is dependent on specific relayer(s).
	RelayerAddress string `protobuf:"bytes,2,opt,name=relayer_address,json=relayerAddress,proto3" json:"relayer_address,omitempty" yaml:"relayer_address"`
	// Height to query at
	QueryHeight uint64 `protobuf:"varint,3,opt,name=query_height,json=queryHeight,proto3" json:"query_height,omitempty" yaml:"query_height"`
}

func (m *QueryTimeoutFeeRequest) Reset()         { *m = QueryTimeoutFeeRequest{} }
func (m *QueryTimeoutFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTimeoutFeeRequest) ProtoMessage()    {}
func (*QueryTimeoutFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cafe0e1bd8b928c, []int{4}
}
func (m *QueryTimeoutFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTimeoutFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTimeoutFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTimeoutFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTimeoutFeeRequest.Merge(m, src)
}
func (m *QueryTimeoutFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTimeoutFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTimeoutFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTimeoutFeeRequest proto.InternalMessageInfo

func (m *QueryTimeoutFeeRequest) GetPacketId() *types.PacketId {
	if m != nil {
		return m.PacketId
	}
	return nil
}

func (m *QueryTimeoutFeeRequest) GetRelayerAddress() string {
	if m != nil {
		return m.RelayerAddress
	}
	return ""
}

func (m *QueryTimeoutFeeRequest) GetQueryHeight() uint64 {
	if m != nil {
		return m.QueryHeight
	}
	return 0
}

// QueryTimeoutFeeResponse is the response type for the timeout RPC
type QueryTimeoutFeeResponse struct {
	Fee *Fee `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *QueryTimeoutFeeResponse) Reset()         { *m = QueryTimeoutFeeResponse{} }
func (m *QueryTimeoutFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTimeoutFeeResponse) ProtoMessage()    {}
func (*QueryTimeoutFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cafe0e1bd8b928c, []int{5}
}
func (m *QueryTimeoutFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTimeoutFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTimeoutFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTimeoutFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTimeoutFeeResponse.Merge(m, src)
}
func (m *QueryTimeoutFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTimeoutFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTimeoutFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTimeoutFeeResponse proto.InternalMessageInfo

func (m *QueryTimeoutFeeResponse) GetFee() *Fee {
	if m != nil {
		return m.Fee
	}
	return nil
}

// QueryIncentivizedPacketRequest is the request type for querying for all incentivized packets
type QueryIncentivizedPacketsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryIncentivizedPacketsRequest) Reset()         { *m = QueryIncentivizedPacketsRequest{} }
func (m *QueryIncentivizedPacketsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIncentivizedPacketsRequest) ProtoMessage()    {}
func (*QueryIncentivizedPacketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cafe0e1bd8b928c, []int{6}
}
func (m *QueryIncentivizedPacketsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentivizedPacketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentivizedPacketsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentivizedPacketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentivizedPacketsRequest.Merge(m, src)
}
func (m *QueryIncentivizedPacketsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentivizedPacketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentivizedPacketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentivizedPacketsRequest proto.InternalMessageInfo

func (m *QueryIncentivizedPacketsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTimeoutFeeResponse is the response type for the timeout RPC
type QueryIncentivizedPacketsResponse struct {
	// Map of all incentivized_packets
	IncentivizedPackets []*IdentifiedPacketFee `protobuf:"bytes,1,rep,name=incentivized_packets,json=incentivizedPackets,proto3" json:"incentivized_packets,omitempty" yaml:"incentivized_packets"`
	// Height to query at
	QueryHeight uint64 `protobuf:"varint,2,opt,name=query_height,json=queryHeight,proto3" json:"query_height,omitempty" yaml:"query_height"`
}

func (m *QueryIncentivizedPacketsResponse) Reset()         { *m = QueryIncentivizedPacketsResponse{} }
func (m *QueryIncentivizedPacketsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIncentivizedPacketsResponse) ProtoMessage()    {}
func (*QueryIncentivizedPacketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cafe0e1bd8b928c, []int{7}
}
func (m *QueryIncentivizedPacketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentivizedPacketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentivizedPacketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentivizedPacketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentivizedPacketsResponse.Merge(m, src)
}
func (m *QueryIncentivizedPacketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentivizedPacketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentivizedPacketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentivizedPacketsResponse proto.InternalMessageInfo

func (m *QueryIncentivizedPacketsResponse) GetIncentivizedPackets() []*IdentifiedPacketFee {
	if m != nil {
		return m.IncentivizedPackets
	}
	return nil
}

func (m *QueryIncentivizedPacketsResponse) GetQueryHeight() uint64 {
	if m != nil {
		return m.QueryHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryReceiveFeeRequest)(nil), "ibc.applications.middleware.fee.v1.QueryReceiveFeeRequest")
	proto.RegisterType((*QueryReceiveFeeResponse)(nil), "ibc.applications.middleware.fee.v1.QueryReceiveFeeResponse")
	proto.RegisterType((*QueryAckFeeRequest)(nil), "ibc.applications.middleware.fee.v1.QueryAckFeeRequest")
	proto.RegisterType((*QueryAckFeeResponse)(nil), "ibc.applications.middleware.fee.v1.QueryAckFeeResponse")
	proto.RegisterType((*QueryTimeoutFeeRequest)(nil), "ibc.applications.middleware.fee.v1.QueryTimeoutFeeRequest")
	proto.RegisterType((*QueryTimeoutFeeResponse)(nil), "ibc.applications.middleware.fee.v1.QueryTimeoutFeeResponse")
	proto.RegisterType((*QueryIncentivizedPacketsRequest)(nil), "ibc.applications.middleware.fee.v1.QueryIncentivizedPacketsRequest")
	proto.RegisterType((*QueryIncentivizedPacketsResponse)(nil), "ibc.applications.middleware.fee.v1.QueryIncentivizedPacketsResponse")
}

func init() {
	proto.RegisterFile("ibc/applications/middleware/fee/v1/query.proto", fileDescriptor_9cafe0e1bd8b928c)
}

var fileDescriptor_9cafe0e1bd8b928c = []byte{
	// 796 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x96, 0xcf, 0x6b, 0x13, 0x4d,
	0x18, 0xc7, 0x3b, 0xe9, 0xfb, 0x96, 0xb7, 0xd3, 0x97, 0xf7, 0x7d, 0xd9, 0x94, 0x36, 0xe4, 0xd5,
	0x24, 0xee, 0x41, 0x83, 0xd8, 0x19, 0x13, 0xc1, 0xda, 0x7a, 0x6a, 0x2a, 0xc5, 0x82, 0x87, 0x18,
	0x7a, 0xf2, 0x12, 0x36, 0xbb, 0x4f, 0x36, 0x43, 0x93, 0x9d, 0xed, 0xee, 0x26, 0x12, 0x4b, 0x2e,
	0x5e, 0xbd, 0x88, 0xfe, 0x0d, 0x82, 0x82, 0x52, 0xc1, 0x43, 0x8f, 0x5e, 0x3d, 0x16, 0xbc, 0x88,
	0x87, 0x20, 0xad, 0xe0, 0x41, 0x4f, 0xf9, 0x0b, 0x64, 0x77, 0x26, 0xc9, 0xb6, 0x49, 0x6b, 0x62,
	0x11, 0x44, 0x6f, 0x3b, 0xf3, 0xfc, 0x9a, 0xe7, 0x33, 0x33, 0xdf, 0x59, 0x4c, 0x58, 0x49, 0xa7,
	0x9a, 0x6d, 0x57, 0x99, 0xae, 0x79, 0x8c, 0x5b, 0x2e, 0xad, 0x31, 0xc3, 0xa8, 0xc2, 0x5d, 0xcd,
	0x01, 0x5a, 0x06, 0xa0, 0x8d, 0x0c, 0xdd, 0xaa, 0x83, 0xd3, 0x24, 0xb6, 0xc3, 0x3d, 0xae, 0xa8,
	0xac, 0xa4, 0x93, 0xb0, 0x3f, 0xe9, 0xfb, 0x93, 0x32, 0x00, 0x69, 0x64, 0xe2, 0xb3, 0x26, 0x37,
	0x79, 0xe0, 0x4e, 0xfd, 0x2f, 0x11, 0x19, 0xbf, 0xa8, 0x73, 0xb7, 0xc6, 0x5d, 0x5a, 0xd2, 0x5c,
	0x10, 0x29, 0x69, 0x23, 0x53, 0x02, 0x4f, 0xcb, 0x50, 0x5b, 0x33, 0x99, 0x15, 0xa4, 0x93, 0xbe,
	0x97, 0x46, 0x58, 0x95, 0x5f, 0x4c, 0x78, 0x9f, 0x31, 0x39, 0x37, 0xab, 0x40, 0x35, 0x9b, 0x51,
	0xcd, 0xb2, 0xb8, 0x27, 0x57, 0x26, 0xac, 0xe7, 0xfc, 0x5c, 0x3a, 0x77, 0x80, 0xea, 0x15, 0xcd,
	0xb2, 0xa0, 0xea, 0x07, 0xcb, 0xcf, 0xf1, 0x97, 0xa6, 0x7e, 0x46, 0x78, 0xee, 0xb6, 0xef, 0x52,
	0x00, 0x1d, 0x58, 0x03, 0xd6, 0x00, 0x0a, 0xb0, 0x55, 0x07, 0xd7, 0x53, 0xf2, 0x78, 0xda, 0xd6,
	0xf4, 0x4d, 0xf0, 0x8a, 0xcc, 0x88, 0xa1, 0x14, 0x4a, 0xcf, 0x64, 0xcf, 0xfa, 0x7c, 0x89, 0x5f,
	0x9d, 0x74, 0x4b, 0x36, 0x32, 0x24, 0x1f, 0x78, 0xad, 0x1b, 0xb9, 0xd9, 0x4e, 0x3b, 0xf9, 0x5f,
	0x53, 0xab, 0x55, 0x97, 0xd5, 0x5e, 0xa4, 0x5a, 0xf8, 0xcb, 0x96, 0x76, 0x65, 0x15, 0xff, 0xeb,
	0x40, 0x55, 0x6b, 0x82, 0x53, 0xd4, 0x0c, 0xc3, 0x01, 0xd7, 0x8d, 0x45, 0x52, 0x28, 0x3d, 0x9d,
	0x8b, 0x77, 0xda, 0xc9, 0x39, 0x11, 0x78, 0xc4, 0x41, 0x2d, 0xfc, 0x23, 0x67, 0x56, 0xc4, 0x84,
	0xb2, 0x8c, 0xff, 0x0e, 0x7a, 0x2a, 0x56, 0x80, 0x99, 0x15, 0x2f, 0x36, 0x99, 0x42, 0xe9, 0x3f,
	0x72, 0xf3, 0x9d, 0x76, 0x32, 0x2a, 0x32, 0x84, 0xad, 0x6a, 0x61, 0x26, 0x18, 0xde, 0x14, 0xa3,
	0x0d, 0x3c, 0x3f, 0xd0, 0xac, 0x6b, 0x73, 0xcb, 0x05, 0x65, 0x09, 0x4f, 0x96, 0x01, 0x64, 0x9f,
	0x17, 0xc8, 0xb7, 0xcf, 0x05, 0xf1, 0xa3, 0xfd, 0x18, 0xf5, 0x13, 0xc2, 0x4a, 0x90, 0x76, 0x45,
	0xdf, 0xfc, 0xb5, 0xf9, 0xe5, 0x71, 0xf4, 0x50, 0xa3, 0xa7, 0x67, 0xd7, 0x3b, 0x7f, 0x1b, 0xac,
	0x06, 0xbc, 0xee, 0xfd, 0x1e, 0xe7, 0x2f, 0xdc, 0xec, 0xe9, 0x19, 0x32, 0x9c, 0x0c, 0xb2, 0xae,
	0x5b, 0x3a, 0x58, 0x1e, 0x6b, 0xb0, 0x7b, 0x60, 0x08, 0x26, 0x6e, 0x97, 0xe5, 0x1a, 0xc6, 0xfd,
	0xab, 0x2f, 0x8b, 0x9c, 0x27, 0x42, 0x27, 0x88, 0xaf, 0x13, 0x44, 0xa8, 0xa2, 0xd4, 0x09, 0x92,
	0xd7, 0xcc, 0xee, 0x3e, 0x14, 0x42, 0x91, 0xea, 0x17, 0x84, 0x53, 0xc7, 0xd7, 0x92, 0xad, 0x3c,
	0x40, 0x78, 0x96, 0x85, 0xec, 0x45, 0xb1, 0x01, 0x6e, 0x0c, 0xa5, 0x26, 0xd3, 0x33, 0xd9, 0xc5,
	0x51, 0x9a, 0x5b, 0x37, 0xfc, 0xf0, 0x32, 0xeb, 0x66, 0x5f, 0x03, 0xc8, 0x25, 0x3b, 0xed, 0xe4,
	0xff, 0x82, 0xf1, 0xb0, 0xf4, 0x6a, 0x21, 0xca, 0x06, 0x57, 0x35, 0xb0, 0x5f, 0x91, 0xd1, 0xf7,
	0x2b, 0xfb, 0x68, 0x1a, 0xff, 0x19, 0xb4, 0xab, 0xbc, 0x8e, 0x60, 0xdc, 0x57, 0x0d, 0x65, 0x79,
	0x94, 0x1e, 0x86, 0xeb, 0x6a, 0xfc, 0xfa, 0x77, 0xc5, 0x0a, 0xb6, 0xea, 0x2e, 0xba, 0xff, 0xf6,
	0xe3, 0xe3, 0xc8, 0x4b, 0xa4, 0xbc, 0x40, 0x54, 0x3e, 0x2b, 0xc3, 0x9e, 0x13, 0x47, 0x84, 0x16,
	0xfd, 0xa1, 0xcd, 0x1d, 0x8f, 0x6e, 0xf7, 0x6e, 0x04, 0xf1, 0xc7, 0x45, 0x66, 0xb4, 0x7a, 0x2f,
	0x48, 0xc8, 0x26, 0xa7, 0x02, 0xb3, 0xeb, 0x2f, 0xd8, 0xd2, 0x21, 0x6c, 0xef, 0xce, 0xb5, 0xa8,
	0xbc, 0x16, 0x74, 0xfb, 0xc8, 0x8d, 0x69, 0x51, 0x81, 0x92, 0x6e, 0x87, 0xc1, 0xb6, 0x94, 0x9d,
	0x08, 0x9e, 0x12, 0xba, 0xa1, 0x5c, 0x1d, 0x99, 0xc0, 0x21, 0x45, 0x8d, 0x2f, 0x8e, 0x1d, 0x27,
	0xa9, 0xbd, 0x12, 0xd4, 0x9e, 0x23, 0xe5, 0xd9, 0x89, 0xd4, 0x34, 0x7d, 0xf3, 0x27, 0x22, 0xb6,
	0x1b, 0xc1, 0xb8, 0xaf, 0x14, 0x63, 0x9c, 0xb9, 0x01, 0x2d, 0x1d, 0xe3, 0xcc, 0x0d, 0x4a, 0x93,
	0xba, 0x23, 0xe8, 0x3d, 0x45, 0xca, 0x93, 0x13, 0xe9, 0x79, 0x22, 0xf4, 0x07, 0x12, 0x1c, 0x95,
	0xdc, 0x7b, 0x84, 0xa3, 0x43, 0x14, 0x4a, 0x59, 0x1d, 0x19, 0xc3, 0xf1, 0x5a, 0x1a, 0xbf, 0x71,
	0xba, 0x24, 0x12, 0xea, 0xb5, 0x80, 0x69, 0x56, 0xb9, 0x7c, 0x12, 0xd1, 0x61, 0x32, 0x97, 0xbb,
	0xf5, 0x66, 0x3f, 0x81, 0xf6, 0xf6, 0x13, 0xe8, 0xc3, 0x7e, 0x02, 0x3d, 0x3c, 0x48, 0x4c, 0xec,
	0x1d, 0x24, 0x26, 0xde, 0x1d, 0x24, 0x26, 0xee, 0x64, 0x4d, 0xe6, 0x55, 0xea, 0x25, 0xa2, 0xf3,
	0x1a, 0x95, 0xff, 0x80, 0xac, 0xa4, 0x2f, 0x98, 0x9c, 0xd6, 0xb8, 0x51, 0xaf, 0x82, 0x2b, 0xea,
	0x64, 0x97, 0x16, 0xfc, 0xfc, 0x5e, 0xd3, 0x06, 0xb7, 0x34, 0x15, 0xfc, 0x07, 0x5e, 0xf9, 0x1a,
	0x00, 0x00, 0xff, 0xff, 0x39, 0x46, 0x37, 0xbe, 0x3a, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Gets the fee expected for submitting ReceivePacket msg for the given packet
	ReceiveFee(ctx context.Context, in *QueryReceiveFeeRequest, opts ...grpc.CallOption) (*QueryReceiveFeeResponse, error)
	// Gets the fee expected for submitting AcknowledgePacket msg for the given packet
	AckFee(ctx context.Context, in *QueryAckFeeRequest, opts ...grpc.CallOption) (*QueryAckFeeResponse, error)
	// Gets the fee expected for submitting TimeoutPacket msg for the given packet
	TimeoutFee(ctx context.Context, in *QueryTimeoutFeeRequest, opts ...grpc.CallOption) (*QueryTimeoutFeeResponse, error)
	// Gets all incentivized packets
	IncentivizedPackets(ctx context.Context, in *QueryIncentivizedPacketsRequest, opts ...grpc.CallOption) (*QueryIncentivizedPacketsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ReceiveFee(ctx context.Context, in *QueryReceiveFeeRequest, opts ...grpc.CallOption) (*QueryReceiveFeeResponse, error) {
	out := new(QueryReceiveFeeResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.middleware.fee.v1.Query/ReceiveFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AckFee(ctx context.Context, in *QueryAckFeeRequest, opts ...grpc.CallOption) (*QueryAckFeeResponse, error) {
	out := new(QueryAckFeeResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.middleware.fee.v1.Query/AckFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimeoutFee(ctx context.Context, in *QueryTimeoutFeeRequest, opts ...grpc.CallOption) (*QueryTimeoutFeeResponse, error) {
	out := new(QueryTimeoutFeeResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.middleware.fee.v1.Query/TimeoutFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IncentivizedPackets(ctx context.Context, in *QueryIncentivizedPacketsRequest, opts ...grpc.CallOption) (*QueryIncentivizedPacketsResponse, error) {
	out := new(QueryIncentivizedPacketsResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.middleware.fee.v1.Query/IncentivizedPackets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Gets the fee expected for submitting ReceivePacket msg for the given packet
	ReceiveFee(context.Context, *QueryReceiveFeeRequest) (*QueryReceiveFeeResponse, error)
	// Gets the fee expected for submitting AcknowledgePacket msg for the given packet
	AckFee(context.Context, *QueryAckFeeRequest) (*QueryAckFeeResponse, error)
	// Gets the fee expected for submitting TimeoutPacket msg for the given packet
	TimeoutFee(context.Context, *QueryTimeoutFeeRequest) (*QueryTimeoutFeeResponse, error)
	// Gets all incentivized packets
	IncentivizedPackets(context.Context, *QueryIncentivizedPacketsRequest) (*QueryIncentivizedPacketsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ReceiveFee(ctx context.Context, req *QueryReceiveFeeRequest) (*QueryReceiveFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveFee not implemented")
}
func (*UnimplementedQueryServer) AckFee(ctx context.Context, req *QueryAckFeeRequest) (*QueryAckFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckFee not implemented")
}
func (*UnimplementedQueryServer) TimeoutFee(ctx context.Context, req *QueryTimeoutFeeRequest) (*QueryTimeoutFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeoutFee not implemented")
}
func (*UnimplementedQueryServer) IncentivizedPackets(ctx context.Context, req *QueryIncentivizedPacketsRequest) (*QueryIncentivizedPacketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncentivizedPackets not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ReceiveFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReceiveFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReceiveFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.middleware.fee.v1.Query/ReceiveFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReceiveFee(ctx, req.(*QueryReceiveFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AckFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAckFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AckFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.middleware.fee.v1.Query/AckFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AckFee(ctx, req.(*QueryAckFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimeoutFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTimeoutFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimeoutFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.middleware.fee.v1.Query/TimeoutFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimeoutFee(ctx, req.(*QueryTimeoutFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IncentivizedPackets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIncentivizedPacketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IncentivizedPackets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.middleware.fee.v1.Query/IncentivizedPackets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IncentivizedPackets(ctx, req.(*QueryIncentivizedPacketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.applications.middleware.fee.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveFee",
			Handler:    _Query_ReceiveFee_Handler,
		},
		{
			MethodName: "AckFee",
			Handler:    _Query_AckFee_Handler,
		},
		{
			MethodName: "TimeoutFee",
			Handler:    _Query_TimeoutFee_Handler,
		},
		{
			MethodName: "IncentivizedPackets",
			Handler:    _Query_IncentivizedPackets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/applications/middleware/fee/v1/query.proto",
}

func (m *QueryReceiveFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReceiveFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReceiveFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QueryHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RelayerAddress) > 0 {
		i -= len(m.RelayerAddress)
		copy(dAtA[i:], m.RelayerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RelayerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.PacketId != nil {
		{
			size, err := m.PacketId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReceiveFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReceiveFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReceiveFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAckFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAckFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAckFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QueryHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RelayerAddress) > 0 {
		i -= len(m.RelayerAddress)
		copy(dAtA[i:], m.RelayerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RelayerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.PacketId != nil {
		{
			size, err := m.PacketId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAckFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAckFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAckFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTimeoutFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTimeoutFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTimeoutFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QueryHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RelayerAddress) > 0 {
		i -= len(m.RelayerAddress)
		copy(dAtA[i:], m.RelayerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RelayerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.PacketId != nil {
		{
			size, err := m.PacketId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTimeoutFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTimeoutFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTimeoutFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIncentivizedPacketsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentivizedPacketsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentivizedPacketsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIncentivizedPacketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentivizedPacketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentivizedPacketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QueryHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IncentivizedPackets) > 0 {
		for iNdEx := len(m.IncentivizedPackets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncentivizedPackets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryReceiveFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PacketId != nil {
		l = m.PacketId.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RelayerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.QueryHeight != 0 {
		n += 1 + sovQuery(uint64(m.QueryHeight))
	}
	return n
}

func (m *QueryReceiveFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAckFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PacketId != nil {
		l = m.PacketId.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RelayerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.QueryHeight != 0 {
		n += 1 + sovQuery(uint64(m.QueryHeight))
	}
	return n
}

func (m *QueryAckFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTimeoutFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PacketId != nil {
		l = m.PacketId.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RelayerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.QueryHeight != 0 {
		n += 1 + sovQuery(uint64(m.QueryHeight))
	}
	return n
}

func (m *QueryTimeoutFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIncentivizedPacketsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIncentivizedPacketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IncentivizedPackets) > 0 {
		for _, e := range m.IncentivizedPackets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.QueryHeight != 0 {
		n += 1 + sovQuery(uint64(m.QueryHeight))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryReceiveFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReceiveFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReceiveFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PacketId == nil {
				m.PacketId = &types.PacketId{}
			}
			if err := m.PacketId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryHeight", wireType)
			}
			m.QueryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReceiveFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReceiveFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReceiveFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &Fee{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAckFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAckFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAckFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PacketId == nil {
				m.PacketId = &types.PacketId{}
			}
			if err := m.PacketId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryHeight", wireType)
			}
			m.QueryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAckFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAckFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAckFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &Fee{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTimeoutFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTimeoutFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTimeoutFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PacketId == nil {
				m.PacketId = &types.PacketId{}
			}
			if err := m.PacketId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryHeight", wireType)
			}
			m.QueryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTimeoutFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTimeoutFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTimeoutFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &Fee{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentivizedPacketsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentivizedPacketsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentivizedPacketsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentivizedPacketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentivizedPacketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentivizedPacketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentivizedPackets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncentivizedPackets = append(m.IncentivizedPackets, &IdentifiedPacketFee{})
			if err := m.IncentivizedPackets[len(m.IncentivizedPackets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryHeight", wireType)
			}
			m.QueryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
