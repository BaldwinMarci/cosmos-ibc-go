// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/fee/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	types "github.com/cosmos/ibc-go/v3/modules/core/04-channel/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryIncentivizedPacketsRequest is the request type for querying for all incentivized packets
type QueryIncentivizedPacketsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Height to query at
	QueryHeight uint64 `protobuf:"varint,2,opt,name=query_height,json=queryHeight,proto3" json:"query_height,omitempty"`
}

func (m *QueryIncentivizedPacketsRequest) Reset()         { *m = QueryIncentivizedPacketsRequest{} }
func (m *QueryIncentivizedPacketsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIncentivizedPacketsRequest) ProtoMessage()    {}
func (*QueryIncentivizedPacketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{0}
}
func (m *QueryIncentivizedPacketsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentivizedPacketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentivizedPacketsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentivizedPacketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentivizedPacketsRequest.Merge(m, src)
}
func (m *QueryIncentivizedPacketsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentivizedPacketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentivizedPacketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentivizedPacketsRequest proto.InternalMessageInfo

func (m *QueryIncentivizedPacketsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryIncentivizedPacketsRequest) GetQueryHeight() uint64 {
	if m != nil {
		return m.QueryHeight
	}
	return 0
}

// QueryIncentivizedPacketsResponse is the response type for the incentivized packets RPC
type QueryIncentivizedPacketsResponse struct {
	// Map of all incentivized_packets
	IncentivizedPackets []IdentifiedPacketFees `protobuf:"bytes,1,rep,name=incentivized_packets,json=incentivizedPackets,proto3" json:"incentivized_packets"`
}

func (m *QueryIncentivizedPacketsResponse) Reset()         { *m = QueryIncentivizedPacketsResponse{} }
func (m *QueryIncentivizedPacketsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIncentivizedPacketsResponse) ProtoMessage()    {}
func (*QueryIncentivizedPacketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{1}
}
func (m *QueryIncentivizedPacketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentivizedPacketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentivizedPacketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentivizedPacketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentivizedPacketsResponse.Merge(m, src)
}
func (m *QueryIncentivizedPacketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentivizedPacketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentivizedPacketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentivizedPacketsResponse proto.InternalMessageInfo

func (m *QueryIncentivizedPacketsResponse) GetIncentivizedPackets() []IdentifiedPacketFees {
	if m != nil {
		return m.IncentivizedPackets
	}
	return nil
}

// QueryIncentivizedPacketRequest is the request type for querying for all incentivized packets
type QueryIncentivizedPacketRequest struct {
	// PacketID
	PacketId types.PacketId `protobuf:"bytes,1,opt,name=packet_id,json=packetId,proto3" json:"packet_id"`
	// Height to query at
	QueryHeight uint64 `protobuf:"varint,2,opt,name=query_height,json=queryHeight,proto3" json:"query_height,omitempty"`
}

func (m *QueryIncentivizedPacketRequest) Reset()         { *m = QueryIncentivizedPacketRequest{} }
func (m *QueryIncentivizedPacketRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIncentivizedPacketRequest) ProtoMessage()    {}
func (*QueryIncentivizedPacketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{2}
}
func (m *QueryIncentivizedPacketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentivizedPacketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentivizedPacketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentivizedPacketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentivizedPacketRequest.Merge(m, src)
}
func (m *QueryIncentivizedPacketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentivizedPacketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentivizedPacketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentivizedPacketRequest proto.InternalMessageInfo

func (m *QueryIncentivizedPacketRequest) GetPacketId() types.PacketId {
	if m != nil {
		return m.PacketId
	}
	return types.PacketId{}
}

func (m *QueryIncentivizedPacketRequest) GetQueryHeight() uint64 {
	if m != nil {
		return m.QueryHeight
	}
	return 0
}

// QueryIncentivizedPacketsResponse is the response type for the incentivized packet RPC
type QueryIncentivizedPacketResponse struct {
	// Incentivized_packet
	IncentivizedPacket IdentifiedPacketFees `protobuf:"bytes,1,opt,name=incentivized_packet,json=incentivizedPacket,proto3" json:"incentivized_packet"`
}

func (m *QueryIncentivizedPacketResponse) Reset()         { *m = QueryIncentivizedPacketResponse{} }
func (m *QueryIncentivizedPacketResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIncentivizedPacketResponse) ProtoMessage()    {}
func (*QueryIncentivizedPacketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{3}
}
func (m *QueryIncentivizedPacketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentivizedPacketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentivizedPacketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentivizedPacketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentivizedPacketResponse.Merge(m, src)
}
func (m *QueryIncentivizedPacketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentivizedPacketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentivizedPacketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentivizedPacketResponse proto.InternalMessageInfo

func (m *QueryIncentivizedPacketResponse) GetIncentivizedPacket() IdentifiedPacketFees {
	if m != nil {
		return m.IncentivizedPacket
	}
	return IdentifiedPacketFees{}
}

// QueryTotalRecvFeesRequest defines the request type for the TotalRecvFees rpc
type QueryTotalRecvFeesRequest struct {
	// the packet identifier for the associated fees
	PacketId types.PacketId `protobuf:"bytes,1,opt,name=packet_id,json=packetId,proto3" json:"packet_id"`
}

func (m *QueryTotalRecvFeesRequest) Reset()         { *m = QueryTotalRecvFeesRequest{} }
func (m *QueryTotalRecvFeesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalRecvFeesRequest) ProtoMessage()    {}
func (*QueryTotalRecvFeesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{4}
}
func (m *QueryTotalRecvFeesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalRecvFeesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalRecvFeesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalRecvFeesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalRecvFeesRequest.Merge(m, src)
}
func (m *QueryTotalRecvFeesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalRecvFeesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalRecvFeesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalRecvFeesRequest proto.InternalMessageInfo

func (m *QueryTotalRecvFeesRequest) GetPacketId() types.PacketId {
	if m != nil {
		return m.PacketId
	}
	return types.PacketId{}
}

// QueryTotalRecvFeesResponse defines the response type for the TotalRecvFees rpc
type QueryTotalRecvFeesResponse struct {
	// the total packet receive fees
	RecvFees github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=recv_fees,json=recvFees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"recv_fees" yaml:"recv_fees"`
}

func (m *QueryTotalRecvFeesResponse) Reset()         { *m = QueryTotalRecvFeesResponse{} }
func (m *QueryTotalRecvFeesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalRecvFeesResponse) ProtoMessage()    {}
func (*QueryTotalRecvFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0638a8a78ca2503c, []int{5}
}
func (m *QueryTotalRecvFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalRecvFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalRecvFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalRecvFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalRecvFeesResponse.Merge(m, src)
}
func (m *QueryTotalRecvFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalRecvFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalRecvFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalRecvFeesResponse proto.InternalMessageInfo

func (m *QueryTotalRecvFeesResponse) GetRecvFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.RecvFees
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryIncentivizedPacketsRequest)(nil), "ibc.applications.fee.v1.QueryIncentivizedPacketsRequest")
	proto.RegisterType((*QueryIncentivizedPacketsResponse)(nil), "ibc.applications.fee.v1.QueryIncentivizedPacketsResponse")
	proto.RegisterType((*QueryIncentivizedPacketRequest)(nil), "ibc.applications.fee.v1.QueryIncentivizedPacketRequest")
	proto.RegisterType((*QueryIncentivizedPacketResponse)(nil), "ibc.applications.fee.v1.QueryIncentivizedPacketResponse")
	proto.RegisterType((*QueryTotalRecvFeesRequest)(nil), "ibc.applications.fee.v1.QueryTotalRecvFeesRequest")
	proto.RegisterType((*QueryTotalRecvFeesResponse)(nil), "ibc.applications.fee.v1.QueryTotalRecvFeesResponse")
}

func init() {
	proto.RegisterFile("ibc/applications/fee/v1/query.proto", fileDescriptor_0638a8a78ca2503c)
}

var fileDescriptor_0638a8a78ca2503c = []byte{
	// 698 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0x41, 0x6b, 0x13, 0x4d,
	0x18, 0xc7, 0x33, 0x7d, 0xdb, 0x97, 0x76, 0xfa, 0xbe, 0x20, 0xd3, 0x82, 0x6d, 0xd0, 0x4d, 0xba,
	0xa2, 0x06, 0x21, 0x3b, 0x34, 0x45, 0x6c, 0x3d, 0x49, 0x95, 0x62, 0x4f, 0xd6, 0xe0, 0x49, 0x90,
	0xb0, 0x3b, 0x3b, 0xd9, 0x0c, 0x4d, 0x76, 0xb6, 0x99, 0xc9, 0x62, 0x6b, 0xeb, 0xa1, 0x20, 0x82,
	0xf4, 0x20, 0x78, 0xf3, 0x23, 0xf8, 0x0d, 0xfc, 0x06, 0xbd, 0x08, 0x05, 0x2f, 0x9e, 0xaa, 0xb4,
	0x7e, 0x02, 0x4f, 0x1e, 0x65, 0x66, 0x67, 0xd7, 0x2d, 0x49, 0xb4, 0x2d, 0x7a, 0xca, 0xee, 0x3c,
	0xff, 0x67, 0x9e, 0xdf, 0xf3, 0xdf, 0x67, 0x26, 0xf0, 0x0a, 0xf3, 0x08, 0x76, 0xa3, 0xa8, 0xcd,
	0x88, 0x2b, 0x19, 0x0f, 0x05, 0x6e, 0x52, 0x8a, 0xe3, 0x79, 0xbc, 0xd1, 0xa3, 0xdd, 0x4d, 0x27,
	0xea, 0x72, 0xc9, 0xd1, 0x45, 0xe6, 0x11, 0x27, 0x2f, 0x72, 0x9a, 0x94, 0x3a, 0xf1, 0x7c, 0x71,
	0x3a, 0xe0, 0x01, 0xd7, 0x1a, 0xac, 0x9e, 0x12, 0x79, 0xf1, 0x52, 0xc0, 0x79, 0xd0, 0xa6, 0xd8,
	0x8d, 0x18, 0x76, 0xc3, 0x90, 0x4b, 0x93, 0x94, 0x44, 0x2d, 0xc2, 0x45, 0x87, 0x0b, 0xec, 0xb9,
	0x42, 0x15, 0xf2, 0xa8, 0x74, 0xe7, 0x31, 0xe1, 0x2c, 0x34, 0xf1, 0x1b, 0xf9, 0xb8, 0xa6, 0xc8,
	0x54, 0x91, 0x1b, 0xb0, 0x50, 0x6f, 0x66, 0xb4, 0x73, 0xc3, 0xe8, 0x15, 0x5f, 0x4e, 0x42, 0x78,
	0x97, 0x62, 0xd2, 0x72, 0xc3, 0x90, 0xb6, 0x55, 0xd8, 0x3c, 0x26, 0x12, 0x7b, 0x0f, 0xc0, 0xd2,
	0x43, 0x55, 0x68, 0x35, 0x24, 0x34, 0x94, 0x2c, 0x66, 0x5b, 0xd4, 0x5f, 0x73, 0xc9, 0x3a, 0x95,
	0xa2, 0x4e, 0x37, 0x7a, 0x54, 0x48, 0xb4, 0x02, 0xe1, 0xcf, 0xea, 0x33, 0xa0, 0x0c, 0x2a, 0x93,
	0xb5, 0x6b, 0x4e, 0x82, 0xea, 0x28, 0x54, 0x27, 0x31, 0xcc, 0xa0, 0x3a, 0x6b, 0x6e, 0x40, 0x4d,
	0x6e, 0x3d, 0x97, 0x89, 0xe6, 0xe0, 0x7f, 0x5a, 0xd8, 0x68, 0x51, 0x16, 0xb4, 0xe4, 0xcc, 0x48,
	0x19, 0x54, 0x46, 0xeb, 0x93, 0x7a, 0xed, 0xbe, 0x5e, 0xb2, 0x5f, 0x01, 0x58, 0x1e, 0x8e, 0x23,
	0x22, 0x1e, 0x0a, 0x8a, 0x9a, 0x70, 0x9a, 0xe5, 0xc2, 0x8d, 0x28, 0x89, 0xcf, 0x80, 0xf2, 0x3f,
	0x95, 0xc9, 0x5a, 0xd5, 0x19, 0xf2, 0xc5, 0x9c, 0x55, 0x5f, 0xe5, 0x34, 0x59, 0xba, 0xe3, 0x0a,
	0xa5, 0x62, 0x79, 0x74, 0xff, 0xb0, 0x54, 0xa8, 0x4f, 0xb1, 0xfe, 0x7a, 0xf6, 0x0b, 0x00, 0xad,
	0x21, 0x30, 0xa9, 0x35, 0x77, 0xe0, 0x44, 0x52, 0xbd, 0xc1, 0x7c, 0xe3, 0xcc, 0x65, 0x5d, 0x5f,
	0xb9, 0xee, 0xa4, 0x56, 0xc7, 0xca, 0x13, 0xa5, 0x5a, 0xf5, 0x4d, 0xbd, 0xf1, 0xc8, 0xbc, 0x9f,
	0xc6, 0x94, 0x97, 0xc3, 0xbf, 0x51, 0xe6, 0x89, 0x0f, 0xa7, 0x06, 0x78, 0x62, 0x90, 0xce, 0x65,
	0x09, 0xea, 0xb7, 0xc4, 0x7e, 0x02, 0x67, 0x35, 0xc8, 0x23, 0x2e, 0xdd, 0x76, 0x9d, 0x92, 0x58,
	0xe9, 0xff, 0x98, 0x17, 0xf6, 0x5b, 0x00, 0x8b, 0x83, 0xf6, 0x37, 0x3d, 0x6e, 0xc3, 0x89, 0x2e,
	0x25, 0x71, 0xa3, 0x49, 0x69, 0xfa, 0xb1, 0x67, 0x4f, 0x8c, 0x61, 0x3a, 0x80, 0x77, 0x39, 0x0b,
	0x97, 0xef, 0xa9, 0xcd, 0xbf, 0x1d, 0x96, 0x2e, 0x6c, 0xba, 0x9d, 0xf6, 0x6d, 0x3b, 0xcb, 0xb4,
	0xdf, 0x7d, 0x2e, 0x55, 0x02, 0x26, 0x5b, 0x3d, 0xcf, 0x21, 0xbc, 0x83, 0xcd, 0x91, 0x4b, 0x7e,
	0xaa, 0xc2, 0x5f, 0xc7, 0x72, 0x33, 0xa2, 0x42, 0x6f, 0x22, 0xea, 0xe3, 0x5d, 0x43, 0x51, 0xfb,
	0x30, 0x06, 0xc7, 0x34, 0x1c, 0x7a, 0x0f, 0xe0, 0xd4, 0x80, 0xf9, 0x44, 0x8b, 0x43, 0x6d, 0xfe,
	0xcd, 0x09, 0x2b, 0x2e, 0x9d, 0x23, 0x33, 0x31, 0xc5, 0xae, 0xee, 0x7e, 0xfc, 0xfa, 0x66, 0xe4,
	0x3a, 0xba, 0x8a, 0xcd, 0x7d, 0x90, 0xdd, 0x03, 0x83, 0xce, 0x08, 0xda, 0x1b, 0x81, 0xa8, 0x7f,
	0x3b, 0x74, 0xeb, 0xac, 0x00, 0x29, 0xf9, 0xe2, 0xd9, 0x13, 0x0d, 0xf8, 0x2e, 0xd0, 0xe4, 0xdb,
	0x68, 0xeb, 0x34, 0xe4, 0x38, 0xe2, 0x5d, 0x89, 0x9f, 0x65, 0x03, 0xe6, 0xa8, 0xf7, 0x06, 0xf3,
	0x77, 0xb2, 0xab, 0x2d, 0x17, 0x33, 0x4b, 0x3a, 0x2c, 0x14, 0x68, 0x48, 0x68, 0x3e, 0x9e, 0xae,
	0xed, 0xa0, 0xef, 0x00, 0xfe, 0x7f, 0x62, 0xd8, 0x50, 0xed, 0xd7, 0x0d, 0x0d, 0x9a, 0xfc, 0xe2,
	0xc2, 0x99, 0x72, 0x4c, 0xff, 0xcf, 0x75, 0xfb, 0x4f, 0x51, 0xdc, 0xd7, 0xbe, 0x54, 0xfa, 0x46,
	0x36, 0xb0, 0x7f, 0xa7, 0xf5, 0xe5, 0x07, 0xfb, 0x47, 0x16, 0x38, 0x38, 0xb2, 0xc0, 0x97, 0x23,
	0x0b, 0xbc, 0x3e, 0xb6, 0x0a, 0x07, 0xc7, 0x56, 0xe1, 0xd3, 0xb1, 0x55, 0x78, 0x7c, 0xb3, 0xff,
	0x74, 0x30, 0x8f, 0x54, 0x03, 0x8e, 0xe3, 0x05, 0xdc, 0xe1, 0x7e, 0xaf, 0x4d, 0x45, 0x02, 0x5c,
	0x5b, 0xaa, 0x2a, 0x66, 0x7d, 0x60, 0xbc, 0x7f, 0xf5, 0x3f, 0xca, 0xc2, 0x8f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xdd, 0x79, 0x2b, 0x91, 0x57, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Gets all incentivized packets
	IncentivizedPackets(ctx context.Context, in *QueryIncentivizedPacketsRequest, opts ...grpc.CallOption) (*QueryIncentivizedPacketsResponse, error)
	// Gets the fees expected for submitting the ReceivePacket, AcknowledgementPacket, and TimeoutPacket messages for the
	// given packet
	IncentivizedPacket(ctx context.Context, in *QueryIncentivizedPacketRequest, opts ...grpc.CallOption) (*QueryIncentivizedPacketResponse, error)
	// TotalRecvFees returns the total receive fees for a packet given its identifier
	TotalRecvFees(ctx context.Context, in *QueryTotalRecvFeesRequest, opts ...grpc.CallOption) (*QueryTotalRecvFeesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) IncentivizedPackets(ctx context.Context, in *QueryIncentivizedPacketsRequest, opts ...grpc.CallOption) (*QueryIncentivizedPacketsResponse, error) {
	out := new(QueryIncentivizedPacketsResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.fee.v1.Query/IncentivizedPackets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IncentivizedPacket(ctx context.Context, in *QueryIncentivizedPacketRequest, opts ...grpc.CallOption) (*QueryIncentivizedPacketResponse, error) {
	out := new(QueryIncentivizedPacketResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.fee.v1.Query/IncentivizedPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalRecvFees(ctx context.Context, in *QueryTotalRecvFeesRequest, opts ...grpc.CallOption) (*QueryTotalRecvFeesResponse, error) {
	out := new(QueryTotalRecvFeesResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.fee.v1.Query/TotalRecvFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Gets all incentivized packets
	IncentivizedPackets(context.Context, *QueryIncentivizedPacketsRequest) (*QueryIncentivizedPacketsResponse, error)
	// Gets the fees expected for submitting the ReceivePacket, AcknowledgementPacket, and TimeoutPacket messages for the
	// given packet
	IncentivizedPacket(context.Context, *QueryIncentivizedPacketRequest) (*QueryIncentivizedPacketResponse, error)
	// TotalRecvFees returns the total receive fees for a packet given its identifier
	TotalRecvFees(context.Context, *QueryTotalRecvFeesRequest) (*QueryTotalRecvFeesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) IncentivizedPackets(ctx context.Context, req *QueryIncentivizedPacketsRequest) (*QueryIncentivizedPacketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncentivizedPackets not implemented")
}
func (*UnimplementedQueryServer) IncentivizedPacket(ctx context.Context, req *QueryIncentivizedPacketRequest) (*QueryIncentivizedPacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncentivizedPacket not implemented")
}
func (*UnimplementedQueryServer) TotalRecvFees(ctx context.Context, req *QueryTotalRecvFeesRequest) (*QueryTotalRecvFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalRecvFees not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_IncentivizedPackets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIncentivizedPacketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IncentivizedPackets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.fee.v1.Query/IncentivizedPackets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IncentivizedPackets(ctx, req.(*QueryIncentivizedPacketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IncentivizedPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIncentivizedPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IncentivizedPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.fee.v1.Query/IncentivizedPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IncentivizedPacket(ctx, req.(*QueryIncentivizedPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalRecvFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalRecvFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalRecvFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.fee.v1.Query/TotalRecvFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalRecvFees(ctx, req.(*QueryTotalRecvFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.applications.fee.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncentivizedPackets",
			Handler:    _Query_IncentivizedPackets_Handler,
		},
		{
			MethodName: "IncentivizedPacket",
			Handler:    _Query_IncentivizedPacket_Handler,
		},
		{
			MethodName: "TotalRecvFees",
			Handler:    _Query_TotalRecvFees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/applications/fee/v1/query.proto",
}

func (m *QueryIncentivizedPacketsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentivizedPacketsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentivizedPacketsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QueryHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIncentivizedPacketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentivizedPacketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentivizedPacketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IncentivizedPackets) > 0 {
		for iNdEx := len(m.IncentivizedPackets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncentivizedPackets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIncentivizedPacketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentivizedPacketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentivizedPacketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QueryHeight))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.PacketId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryIncentivizedPacketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentivizedPacketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentivizedPacketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.IncentivizedPacket.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalRecvFeesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalRecvFeesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalRecvFeesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PacketId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalRecvFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalRecvFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalRecvFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecvFees) > 0 {
		for iNdEx := len(m.RecvFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecvFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryIncentivizedPacketsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.QueryHeight != 0 {
		n += 1 + sovQuery(uint64(m.QueryHeight))
	}
	return n
}

func (m *QueryIncentivizedPacketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IncentivizedPackets) > 0 {
		for _, e := range m.IncentivizedPackets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryIncentivizedPacketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PacketId.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.QueryHeight != 0 {
		n += 1 + sovQuery(uint64(m.QueryHeight))
	}
	return n
}

func (m *QueryIncentivizedPacketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IncentivizedPacket.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalRecvFeesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PacketId.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalRecvFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RecvFees) > 0 {
		for _, e := range m.RecvFees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryIncentivizedPacketsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentivizedPacketsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentivizedPacketsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryHeight", wireType)
			}
			m.QueryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentivizedPacketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentivizedPacketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentivizedPacketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentivizedPackets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncentivizedPackets = append(m.IncentivizedPackets, IdentifiedPacketFees{})
			if err := m.IncentivizedPackets[len(m.IncentivizedPackets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentivizedPacketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentivizedPacketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentivizedPacketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PacketId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryHeight", wireType)
			}
			m.QueryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentivizedPacketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentivizedPacketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentivizedPacketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentivizedPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncentivizedPacket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalRecvFeesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalRecvFeesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalRecvFeesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PacketId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalRecvFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalRecvFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalRecvFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvFees = append(m.RecvFees, types1.Coin{})
			if err := m.RecvFees[len(m.RecvFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
