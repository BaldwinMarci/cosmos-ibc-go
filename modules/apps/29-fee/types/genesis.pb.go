// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/fee/v1/genesis.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/ibc-go/v3/modules/core/04-channel/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the fee middleware genesis state
type GenesisState struct {
	IdentifiedFees     []IdentifiedPacketFee      `protobuf:"bytes,1,rep,name=identified_fees,json=identifiedFees,proto3" json:"identified_fees" yaml:"identified_fees"`
	FeeEnabledChannels []FeeEnabledChannel        `protobuf:"bytes,2,rep,name=fee_enabled_channels,json=feeEnabledChannels,proto3" json:"fee_enabled_channels" yaml:"fee_enabled_channels"`
	RegisteredRelayers []RegisteredRelayerAddress `protobuf:"bytes,3,rep,name=registered_relayers,json=registeredRelayers,proto3" json:"registered_relayers" yaml:"registered_relayers"`
	ForwardRelayers    []ForwardRelayerAddress    `protobuf:"bytes,4,rep,name=forward_relayers,json=forwardRelayers,proto3" json:"forward_relayers" yaml:"forward_relayers"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_7191992e856dff95, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetIdentifiedFees() []IdentifiedPacketFee {
	if m != nil {
		return m.IdentifiedFees
	}
	return nil
}

func (m *GenesisState) GetFeeEnabledChannels() []FeeEnabledChannel {
	if m != nil {
		return m.FeeEnabledChannels
	}
	return nil
}

func (m *GenesisState) GetRegisteredRelayers() []RegisteredRelayerAddress {
	if m != nil {
		return m.RegisteredRelayers
	}
	return nil
}

func (m *GenesisState) GetForwardRelayers() []ForwardRelayerAddress {
	if m != nil {
		return m.ForwardRelayers
	}
	return nil
}

// FeeEnabledChannel contains the PortID & ChannelID for a fee enabled channel
type FeeEnabledChannel struct {
	PortId    string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty" yaml:"port_id"`
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" yaml:"channel_id"`
}

func (m *FeeEnabledChannel) Reset()         { *m = FeeEnabledChannel{} }
func (m *FeeEnabledChannel) String() string { return proto.CompactTextString(m) }
func (*FeeEnabledChannel) ProtoMessage()    {}
func (*FeeEnabledChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_7191992e856dff95, []int{1}
}
func (m *FeeEnabledChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeEnabledChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeEnabledChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeEnabledChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeEnabledChannel.Merge(m, src)
}
func (m *FeeEnabledChannel) XXX_Size() int {
	return m.Size()
}
func (m *FeeEnabledChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeEnabledChannel.DiscardUnknown(m)
}

var xxx_messageInfo_FeeEnabledChannel proto.InternalMessageInfo

func (m *FeeEnabledChannel) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *FeeEnabledChannel) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

// RegisteredRelayerAddress contains the address and counterparty address for a specific relayer (for distributing fees)
type RegisteredRelayerAddress struct {
	Address             string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	CounterpartyAddress string `protobuf:"bytes,2,opt,name=counterparty_address,json=counterpartyAddress,proto3" json:"counterparty_address,omitempty" yaml:"counterparty_address"`
	ChannelId           string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" yaml:"channel_id"`
}

func (m *RegisteredRelayerAddress) Reset()         { *m = RegisteredRelayerAddress{} }
func (m *RegisteredRelayerAddress) String() string { return proto.CompactTextString(m) }
func (*RegisteredRelayerAddress) ProtoMessage()    {}
func (*RegisteredRelayerAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_7191992e856dff95, []int{2}
}
func (m *RegisteredRelayerAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisteredRelayerAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisteredRelayerAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisteredRelayerAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisteredRelayerAddress.Merge(m, src)
}
func (m *RegisteredRelayerAddress) XXX_Size() int {
	return m.Size()
}
func (m *RegisteredRelayerAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisteredRelayerAddress.DiscardUnknown(m)
}

var xxx_messageInfo_RegisteredRelayerAddress proto.InternalMessageInfo

func (m *RegisteredRelayerAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RegisteredRelayerAddress) GetCounterpartyAddress() string {
	if m != nil {
		return m.CounterpartyAddress
	}
	return ""
}

func (m *RegisteredRelayerAddress) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

// ForwardRelayerAddress contains the forward relayer address and packetId used for async acknowledgements
type ForwardRelayerAddress struct {
	Address  string         `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PacketId types.PacketId `protobuf:"bytes,2,opt,name=packet_id,json=packetId,proto3" json:"packet_id" yaml:"packet_id"`
}

func (m *ForwardRelayerAddress) Reset()         { *m = ForwardRelayerAddress{} }
func (m *ForwardRelayerAddress) String() string { return proto.CompactTextString(m) }
func (*ForwardRelayerAddress) ProtoMessage()    {}
func (*ForwardRelayerAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_7191992e856dff95, []int{3}
}
func (m *ForwardRelayerAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForwardRelayerAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForwardRelayerAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForwardRelayerAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardRelayerAddress.Merge(m, src)
}
func (m *ForwardRelayerAddress) XXX_Size() int {
	return m.Size()
}
func (m *ForwardRelayerAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardRelayerAddress.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardRelayerAddress proto.InternalMessageInfo

func (m *ForwardRelayerAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ForwardRelayerAddress) GetPacketId() types.PacketId {
	if m != nil {
		return m.PacketId
	}
	return types.PacketId{}
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "ibc.applications.fee.v1.GenesisState")
	proto.RegisterType((*FeeEnabledChannel)(nil), "ibc.applications.fee.v1.FeeEnabledChannel")
	proto.RegisterType((*RegisteredRelayerAddress)(nil), "ibc.applications.fee.v1.RegisteredRelayerAddress")
	proto.RegisterType((*ForwardRelayerAddress)(nil), "ibc.applications.fee.v1.ForwardRelayerAddress")
}

func init() {
	proto.RegisterFile("ibc/applications/fee/v1/genesis.proto", fileDescriptor_7191992e856dff95)
}

var fileDescriptor_7191992e856dff95 = []byte{
	// 581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0xd4, 0x3c,
	0x14, 0x9d, 0xb4, 0x55, 0xfb, 0xd5, 0xfd, 0xd4, 0x1f, 0xb7, 0xa5, 0x51, 0x11, 0x49, 0x31, 0x42,
	0xaa, 0x80, 0x26, 0x9a, 0x16, 0x16, 0xb0, 0x63, 0x10, 0x45, 0xb3, 0x02, 0x19, 0x56, 0x6c, 0xa2,
	0xfc, 0xdc, 0xa4, 0x16, 0x99, 0x38, 0xb2, 0x3d, 0x83, 0x86, 0x1d, 0x1b, 0xd8, 0x21, 0x9e, 0x88,
	0x75, 0x97, 0x5d, 0xb2, 0x1a, 0xa1, 0xf6, 0x0d, 0xe6, 0x09, 0x50, 0xe2, 0xa4, 0x33, 0x1d, 0x26,
	0x88, 0xdd, 0x8d, 0x7d, 0xce, 0x3d, 0xc7, 0xc7, 0xb9, 0x46, 0xf7, 0x59, 0x10, 0xba, 0x7e, 0x9e,
	0xa7, 0x2c, 0xf4, 0x15, 0xe3, 0x99, 0x74, 0x63, 0x00, 0x77, 0xd0, 0x76, 0x13, 0xc8, 0x40, 0x32,
	0xe9, 0xe4, 0x82, 0x2b, 0x8e, 0xf7, 0x58, 0x10, 0x3a, 0xd3, 0x30, 0x27, 0x06, 0x70, 0x06, 0xed,
	0xfd, 0x9d, 0x84, 0x27, 0xbc, 0xc4, 0xb8, 0x45, 0xa5, 0xe1, 0xfb, 0x77, 0x9b, 0xba, 0x16, 0xac,
	0x29, 0x48, 0xc8, 0x05, 0xb8, 0xe1, 0x99, 0x9f, 0x65, 0x90, 0x16, 0xdb, 0x55, 0xa9, 0x21, 0xe4,
	0xdb, 0x12, 0xfa, 0xff, 0x95, 0xb6, 0xf1, 0x56, 0xf9, 0x0a, 0x70, 0x1f, 0x6d, 0xb0, 0x08, 0x32,
	0xc5, 0x62, 0x06, 0x91, 0x17, 0x03, 0x48, 0xd3, 0x38, 0x58, 0x3c, 0x5c, 0x3b, 0x7e, 0xe4, 0x34,
	0xf8, 0x73, 0xba, 0xd7, 0xf8, 0x37, 0x7e, 0xf8, 0x01, 0xd4, 0x29, 0x40, 0xc7, 0x3a, 0x1f, 0xd9,
	0xad, 0xf1, 0xc8, 0xbe, 0x35, 0xf4, 0x7b, 0xe9, 0x33, 0x32, 0xd3, 0x92, 0xd0, 0xf5, 0xc9, 0xca,
	0x29, 0x80, 0xc4, 0x9f, 0x0d, 0xb4, 0x13, 0x03, 0x78, 0x90, 0xf9, 0x41, 0x0a, 0x91, 0x57, 0xb9,
	0x94, 0xe6, 0x42, 0x29, 0xfe, 0xa0, 0x51, 0xfc, 0x14, 0xe0, 0xa5, 0xe6, 0xbc, 0xd0, 0x94, 0xce,
	0xbd, 0x4a, 0xfa, 0xb6, 0x96, 0x9e, 0xd7, 0x95, 0x50, 0x1c, 0xcf, 0xf2, 0x24, 0xfe, 0x62, 0xa0,
	0x6d, 0x01, 0x09, 0x93, 0x0a, 0x04, 0x44, 0x9e, 0x80, 0xd4, 0x1f, 0x82, 0x90, 0xe6, 0x62, 0x69,
	0xa1, 0xdd, 0x68, 0x81, 0x5e, 0x73, 0xa8, 0xa6, 0x3c, 0x8f, 0x22, 0x01, 0x52, 0x76, 0x48, 0xe5,
	0x64, 0x5f, 0x3b, 0x99, 0xd3, 0x9b, 0x50, 0x2c, 0x66, 0xd9, 0x12, 0x7f, 0x42, 0x9b, 0x31, 0x17,
	0x1f, 0x7d, 0x31, 0x65, 0x62, 0xa9, 0x34, 0xe1, 0x34, 0xe7, 0xa0, 0x09, 0x33, 0x0e, 0xec, 0xca,
	0xc1, 0x5e, 0x95, 0xc5, 0x4c, 0x57, 0x42, 0x37, 0xe2, 0x1b, 0x3c, 0x49, 0x06, 0x68, 0xeb, 0x8f,
	0x48, 0xf1, 0x43, 0xb4, 0x92, 0x73, 0xa1, 0x3c, 0x16, 0x99, 0xc6, 0x81, 0x71, 0xb8, 0xda, 0xc1,
	0xe3, 0x91, 0xbd, 0xae, 0x7b, 0x56, 0x1b, 0x84, 0x2e, 0x17, 0x55, 0x37, 0xc2, 0x8f, 0x11, 0xaa,
	0x72, 0x2e, 0xf0, 0x0b, 0x25, 0x7e, 0x77, 0x3c, 0xb2, 0xb7, 0x34, 0x7e, 0xb2, 0x47, 0xe8, 0x6a,
	0xf5, 0xd1, 0x8d, 0xc8, 0x0f, 0x03, 0x99, 0x4d, 0x41, 0x62, 0x13, 0xad, 0xf8, 0xba, 0xd4, 0xfa,
	0xb4, 0xfe, 0xc4, 0x14, 0xed, 0x84, 0xbc, 0x9f, 0x29, 0x10, 0xb9, 0x2f, 0xd4, 0xd0, 0xab, 0x61,
	0x5a, 0xd6, 0x9e, 0xfc, 0x06, 0xf3, 0x50, 0x84, 0x6e, 0x4f, 0x2f, 0xd7, 0x6a, 0x37, 0x0f, 0xb0,
	0xf8, 0x8f, 0x07, 0xf8, 0x6a, 0xa0, 0xdd, 0xb9, 0x97, 0xf0, 0x17, 0xf7, 0xef, 0xd0, 0x6a, 0x5e,
	0x8e, 0x4c, 0x9d, 0xd4, 0xda, 0xf1, 0x9d, 0xf2, 0x86, 0x8b, 0xa1, 0x75, 0xea, 0x49, 0x1d, 0xb4,
	0x1d, 0x3d, 0x58, 0xdd, 0xa8, 0x63, 0x56, 0x17, 0xba, 0x59, 0x85, 0x5f, 0xb3, 0x09, 0xfd, 0x2f,
	0xaf, 0x31, 0xaf, 0xcf, 0x2f, 0x2d, 0xe3, 0xe2, 0xd2, 0x32, 0x7e, 0x5d, 0x5a, 0xc6, 0xf7, 0x2b,
	0xab, 0x75, 0x71, 0x65, 0xb5, 0x7e, 0x5e, 0x59, 0xad, 0xf7, 0x4f, 0x12, 0xa6, 0xce, 0xfa, 0x81,
	0x13, 0xf2, 0x9e, 0x1b, 0x72, 0xd9, 0xe3, 0xd2, 0x65, 0x41, 0x78, 0x94, 0x70, 0x77, 0x70, 0xe2,
	0xf6, 0x78, 0xd4, 0x4f, 0x41, 0x16, 0x6f, 0x8a, 0x74, 0x8f, 0x9f, 0x1e, 0x15, 0xcf, 0x89, 0x1a,
	0xe6, 0x20, 0x83, 0xe5, 0xf2, 0xad, 0x38, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x19, 0xed, 0x5e,
	0x39, 0xc9, 0x04, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForwardRelayers) > 0 {
		for iNdEx := len(m.ForwardRelayers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForwardRelayers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RegisteredRelayers) > 0 {
		for iNdEx := len(m.RegisteredRelayers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RegisteredRelayers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FeeEnabledChannels) > 0 {
		for iNdEx := len(m.FeeEnabledChannels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeEnabledChannels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.IdentifiedFees) > 0 {
		for iNdEx := len(m.IdentifiedFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IdentifiedFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FeeEnabledChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeEnabledChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeEnabledChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisteredRelayerAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisteredRelayerAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisteredRelayerAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CounterpartyAddress) > 0 {
		i -= len(m.CounterpartyAddress)
		copy(dAtA[i:], m.CounterpartyAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.CounterpartyAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ForwardRelayerAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardRelayerAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardRelayerAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PacketId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IdentifiedFees) > 0 {
		for _, e := range m.IdentifiedFees {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.FeeEnabledChannels) > 0 {
		for _, e := range m.FeeEnabledChannels {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RegisteredRelayers) > 0 {
		for _, e := range m.RegisteredRelayers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ForwardRelayers) > 0 {
		for _, e := range m.ForwardRelayers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *FeeEnabledChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *RegisteredRelayerAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.CounterpartyAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *ForwardRelayerAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.PacketId.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentifiedFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentifiedFees = append(m.IdentifiedFees, IdentifiedPacketFee{})
			if err := m.IdentifiedFees[len(m.IdentifiedFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeEnabledChannels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeEnabledChannels = append(m.FeeEnabledChannels, FeeEnabledChannel{})
			if err := m.FeeEnabledChannels[len(m.FeeEnabledChannels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredRelayers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisteredRelayers = append(m.RegisteredRelayers, RegisteredRelayerAddress{})
			if err := m.RegisteredRelayers[len(m.RegisteredRelayers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardRelayers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardRelayers = append(m.ForwardRelayers, ForwardRelayerAddress{})
			if err := m.ForwardRelayers[len(m.ForwardRelayers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeEnabledChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeEnabledChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeEnabledChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisteredRelayerAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisteredRelayerAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisteredRelayerAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardRelayerAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardRelayerAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardRelayerAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PacketId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
