// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/apps/ccv/v1/tx.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSubmitNewChain defines a msg to submit a new baby chain that can be validated
// by the parent chain validators.
type MsgSubmitNewChain struct {
	// the proposed chain-id of new chain
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	// minimum stake that must commit to validate new chain before it can start
	MinimumStake types.Coin `protobuf:"bytes,2,opt,name=minimum_stake,json=minimumStake,proto3" json:"minimum_stake"`
	// optional grace period to allow validators to join initial validator set after minimum stake is reached
	// grace period is a duration in nanoseconds
	GracePeriod uint64 `protobuf:"varint,3,opt,name=grace_period,json=gracePeriod,proto3" json:"grace_period,omitempty" yaml:"grace_period"`
	// hash of the genesis file with no staking genesis. Staking genesis will be filled in using gen-txs of initial
	// validator set
	GenesisHash []byte `protobuf:"bytes,4,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty" yaml:"genesis_hash"`
	// the sender address
	Sender string `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgSubmitNewChain) Reset()         { *m = MsgSubmitNewChain{} }
func (m *MsgSubmitNewChain) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitNewChain) ProtoMessage()    {}
func (*MsgSubmitNewChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_3229c9d2d12178da, []int{0}
}
func (m *MsgSubmitNewChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitNewChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitNewChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitNewChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitNewChain.Merge(m, src)
}
func (m *MsgSubmitNewChain) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitNewChain) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitNewChain.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitNewChain proto.InternalMessageInfo

// MsgSubmitNewChainResponse defines the Msg/SubmitNewChain response type.
type MsgSubmitNewChainResponse struct {
}

func (m *MsgSubmitNewChainResponse) Reset()         { *m = MsgSubmitNewChainResponse{} }
func (m *MsgSubmitNewChainResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitNewChainResponse) ProtoMessage()    {}
func (*MsgSubmitNewChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3229c9d2d12178da, []int{1}
}
func (m *MsgSubmitNewChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitNewChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitNewChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitNewChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitNewChainResponse.Merge(m, src)
}
func (m *MsgSubmitNewChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitNewChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitNewChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitNewChainResponse proto.InternalMessageInfo

// MsgBondStake defines a msg for a parent chain validator to stake on a baby chain.
type MsgBondStake struct {
	// the chain-id of baby-chain
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	// amount that validator wants to stake on baby chain. This is in addition to current stake on baby chain,
	// thus the maximum they may stake on baby chain is: `total stake on parent chain - current stake on baby chain`
	Stake types.Coin `protobuf:"bytes,2,opt,name=stake,proto3" json:"stake"`
	// the sender address
	Sender string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgBondStake) Reset()         { *m = MsgBondStake{} }
func (m *MsgBondStake) String() string { return proto.CompactTextString(m) }
func (*MsgBondStake) ProtoMessage()    {}
func (*MsgBondStake) Descriptor() ([]byte, []int) {
	return fileDescriptor_3229c9d2d12178da, []int{2}
}
func (m *MsgBondStake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBondStake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBondStake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBondStake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBondStake.Merge(m, src)
}
func (m *MsgBondStake) XXX_Size() int {
	return m.Size()
}
func (m *MsgBondStake) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBondStake.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBondStake proto.InternalMessageInfo

// MsgBondStakeResponse defines the Msg/BondStake response type
type MsgBondStakeResponse struct {
}

func (m *MsgBondStakeResponse) Reset()         { *m = MsgBondStakeResponse{} }
func (m *MsgBondStakeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBondStakeResponse) ProtoMessage()    {}
func (*MsgBondStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3229c9d2d12178da, []int{3}
}
func (m *MsgBondStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBondStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBondStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBondStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBondStakeResponse.Merge(m, src)
}
func (m *MsgBondStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBondStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBondStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBondStakeResponse proto.InternalMessageInfo

// MsgUnbondStake defines a msg for parent chain validator to unbond their stake on baby chain.
type MsgUnbondStake struct {
	// the chain-id of baby-chain
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	// amount that validator wants to unbond from baby chain. This may be a maximum of the current stake on baby chain
	Stake types.Coin `protobuf:"bytes,2,opt,name=stake,proto3" json:"stake"`
	// the sender address
	Sender string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgUnbondStake) Reset()         { *m = MsgUnbondStake{} }
func (m *MsgUnbondStake) String() string { return proto.CompactTextString(m) }
func (*MsgUnbondStake) ProtoMessage()    {}
func (*MsgUnbondStake) Descriptor() ([]byte, []int) {
	return fileDescriptor_3229c9d2d12178da, []int{4}
}
func (m *MsgUnbondStake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnbondStake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnbondStake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnbondStake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnbondStake.Merge(m, src)
}
func (m *MsgUnbondStake) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnbondStake) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnbondStake.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnbondStake proto.InternalMessageInfo

// MsgUnbondStakeResponse defines the Msg/UnbondStake response type
type MsgUnbondStakeResponse struct {
}

func (m *MsgUnbondStakeResponse) Reset()         { *m = MsgUnbondStakeResponse{} }
func (m *MsgUnbondStakeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnbondStakeResponse) ProtoMessage()    {}
func (*MsgUnbondStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3229c9d2d12178da, []int{5}
}
func (m *MsgUnbondStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnbondStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnbondStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnbondStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnbondStakeResponse.Merge(m, src)
}
func (m *MsgUnbondStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnbondStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnbondStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnbondStakeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSubmitNewChain)(nil), "ibc.apps.ccv.v1.MsgSubmitNewChain")
	proto.RegisterType((*MsgSubmitNewChainResponse)(nil), "ibc.apps.ccv.v1.MsgSubmitNewChainResponse")
	proto.RegisterType((*MsgBondStake)(nil), "ibc.apps.ccv.v1.MsgBondStake")
	proto.RegisterType((*MsgBondStakeResponse)(nil), "ibc.apps.ccv.v1.MsgBondStakeResponse")
	proto.RegisterType((*MsgUnbondStake)(nil), "ibc.apps.ccv.v1.MsgUnbondStake")
	proto.RegisterType((*MsgUnbondStakeResponse)(nil), "ibc.apps.ccv.v1.MsgUnbondStakeResponse")
}

func init() { proto.RegisterFile("ibc/apps/ccv/v1/tx.proto", fileDescriptor_3229c9d2d12178da) }

var fileDescriptor_3229c9d2d12178da = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x93, 0xb1, 0x6e, 0x13, 0x31,
	0x1c, 0xc6, 0xcf, 0x6d, 0x5a, 0xc0, 0x0d, 0x54, 0x5c, 0xab, 0x70, 0x2d, 0xd2, 0x25, 0xba, 0x29,
	0x0b, 0xb6, 0x02, 0x62, 0xc9, 0x78, 0x65, 0xa0, 0x43, 0x10, 0xba, 0x8a, 0x85, 0x25, 0xb2, 0x7d,
	0x96, 0xcf, 0xa2, 0xb6, 0x4f, 0xf9, 0x5f, 0x0e, 0xfa, 0x06, 0x8c, 0x48, 0x88, 0x19, 0x1e, 0xa7,
	0x63, 0x47, 0xa6, 0x08, 0x25, 0x6f, 0xd0, 0x27, 0x40, 0x77, 0x97, 0xc2, 0x55, 0xb0, 0x64, 0xeb,
	0xf6, 0xff, 0xf4, 0xf9, 0xd3, 0xf7, 0xf3, 0x5f, 0x36, 0x0e, 0x34, 0x17, 0x94, 0xe5, 0x39, 0x50,
	0x21, 0x4a, 0x5a, 0x8e, 0x68, 0xf1, 0x89, 0xe4, 0x33, 0x57, 0x38, 0x7f, 0x5f, 0x73, 0x41, 0x2a,
	0x87, 0x08, 0x51, 0x92, 0x72, 0x74, 0x7c, 0xa8, 0x9c, 0x72, 0xb5, 0x47, 0xab, 0xa9, 0x39, 0x76,
	0x1c, 0x0a, 0x07, 0xc6, 0x01, 0xe5, 0x0c, 0x24, 0x2d, 0x47, 0x5c, 0x16, 0x6c, 0x44, 0x85, 0xd3,
	0xb6, 0xf1, 0xa3, 0xef, 0x5b, 0xf8, 0xf1, 0x04, 0xd4, 0xd9, 0x9c, 0x1b, 0x5d, 0xbc, 0x91, 0x1f,
	0x4f, 0x32, 0xa6, 0xad, 0x4f, 0xf0, 0x7d, 0x51, 0x0d, 0x53, 0x9d, 0x06, 0x68, 0x80, 0x86, 0x0f,
	0xe2, 0x83, 0xeb, 0x45, 0x7f, 0xff, 0x82, 0x99, 0xf3, 0x71, 0x74, 0xe3, 0x44, 0xc9, 0xbd, 0x7a,
	0x3c, 0x4d, 0xfd, 0x57, 0xf8, 0xa1, 0xd1, 0x56, 0x9b, 0xb9, 0x99, 0x42, 0xc1, 0x3e, 0xc8, 0x60,
	0x6b, 0x80, 0x86, 0x7b, 0xcf, 0x8f, 0x48, 0xd3, 0x4e, 0xaa, 0x76, 0xb2, 0x6e, 0x27, 0x27, 0x4e,
	0xdb, 0xb8, 0x73, 0xb9, 0xe8, 0x7b, 0x49, 0x77, 0x9d, 0x3a, 0xab, 0x42, 0xfe, 0x18, 0x77, 0xd5,
	0x8c, 0x09, 0x39, 0xcd, 0xe5, 0x4c, 0xbb, 0x34, 0xd8, 0x1e, 0xa0, 0x61, 0x27, 0x7e, 0x72, 0xbd,
	0xe8, 0x1f, 0x34, 0xcd, 0x6d, 0x37, 0x4a, 0xf6, 0x6a, 0xf9, 0xb6, 0x56, 0x75, 0x56, 0x5a, 0x09,
	0x1a, 0xa6, 0x19, 0x83, 0x2c, 0xe8, 0x0c, 0xd0, 0xb0, 0x7b, 0x2b, 0xdb, 0x72, 0xab, 0x6c, 0x23,
	0x5f, 0x33, 0xc8, 0xfc, 0x1e, 0xde, 0x05, 0x69, 0x53, 0x39, 0x0b, 0x76, 0xaa, 0xbb, 0x26, 0x6b,
	0x35, 0xee, 0x7c, 0xfe, 0xd1, 0xf7, 0xa2, 0xa7, 0xf8, 0xe8, 0x9f, 0x05, 0x25, 0x12, 0x72, 0x67,
	0x41, 0x46, 0x5f, 0x11, 0xee, 0x4e, 0x40, 0xc5, 0xce, 0xa6, 0xcd, 0x1d, 0x36, 0xdd, 0xdc, 0x4b,
	0xbc, 0xb3, 0xd1, 0xc6, 0x9a, 0xd3, 0x2d, 0xe4, 0xed, 0xff, 0x20, 0xf7, 0xf0, 0x61, 0x1b, 0xea,
	0x0f, 0xed, 0x37, 0x84, 0x1f, 0x4d, 0x40, 0xbd, 0xb3, 0xfc, 0x6e, 0xf1, 0x06, 0xb8, 0x77, 0x1b,
	0xeb, 0x86, 0x38, 0x3e, 0xbd, 0x5c, 0x86, 0xe8, 0x6a, 0x19, 0xa2, 0x5f, 0xcb, 0x10, 0x7d, 0x59,
	0x85, 0xde, 0xd5, 0x2a, 0xf4, 0x7e, 0xae, 0x42, 0xef, 0x3d, 0x55, 0xba, 0xc8, 0xe6, 0x9c, 0x08,
	0x67, 0xe8, 0xfa, 0x8d, 0x6b, 0x2e, 0x9e, 0x29, 0x47, 0x8d, 0x4b, 0xe7, 0xe7, 0x12, 0xfe, 0x7e,
	0x9b, 0xe2, 0x22, 0x97, 0xc0, 0x77, 0xeb, 0x07, 0xff, 0xe2, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x20, 0xa6, 0x60, 0xfb, 0x53, 0x03, 0x00, 0x00,
}

func (m *MsgSubmitNewChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitNewChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitNewChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GenesisHash) > 0 {
		i -= len(m.GenesisHash)
		copy(dAtA[i:], m.GenesisHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GenesisHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.GracePeriod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GracePeriod))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.MinimumStake.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitNewChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitNewChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitNewChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBondStake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBondStake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBondStake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Stake.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBondStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBondStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBondStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnbondStake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnbondStake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnbondStake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Stake.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnbondStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnbondStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnbondStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSubmitNewChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MinimumStake.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.GracePeriod != 0 {
		n += 1 + sovTx(uint64(m.GracePeriod))
	}
	l = len(m.GenesisHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitNewChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBondStake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Stake.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBondStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnbondStake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Stake.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnbondStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSubmitNewChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitNewChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitNewChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumStake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GracePeriod", wireType)
			}
			m.GracePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GracePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisHash = append(m.GenesisHash[:0], dAtA[iNdEx:postIndex]...)
			if m.GenesisHash == nil {
				m.GenesisHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitNewChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitNewChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitNewChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBondStake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBondStake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBondStake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBondStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBondStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBondStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnbondStake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnbondStake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnbondStake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnbondStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnbondStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnbondStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
