// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/core/port/v1/port.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RoutedVersion will be set for a particular port in order that must be called for channels with the given port
// Note the Routes must be unique
type RoutedVersion struct {
	// ordered list of modules that will be called by port keeper in order for a given port
	// module list must be unique
	Modules []string `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
	// version for each module. length of version list must match module list
	Version []string `protobuf:"bytes,2,rep,name=version,proto3" json:"version,omitempty"`
}

func (m *RoutedVersion) Reset()         { *m = RoutedVersion{} }
func (m *RoutedVersion) String() string { return proto.CompactTextString(m) }
func (*RoutedVersion) ProtoMessage()    {}
func (*RoutedVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_5edeb5ebd0f9a3d1, []int{0}
}
func (m *RoutedVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutedVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutedVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutedVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutedVersion.Merge(m, src)
}
func (m *RoutedVersion) XXX_Size() int {
	return m.Size()
}
func (m *RoutedVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutedVersion.DiscardUnknown(m)
}

var xxx_messageInfo_RoutedVersion proto.InternalMessageInfo

func (m *RoutedVersion) GetModules() []string {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *RoutedVersion) GetVersion() []string {
	if m != nil {
		return m.Version
	}
	return nil
}

// RoutedPacketData is a map of packet data that contains separate application specific packet data
// for each route
type RoutedPacketData struct {
	PacketData map[string][]byte `protobuf:"bytes,1,rep,name=packet_data,json=packetData,proto3" json:"packet_data" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RoutedPacketData) Reset()         { *m = RoutedPacketData{} }
func (m *RoutedPacketData) String() string { return proto.CompactTextString(m) }
func (*RoutedPacketData) ProtoMessage()    {}
func (*RoutedPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5edeb5ebd0f9a3d1, []int{1}
}
func (m *RoutedPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutedPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutedPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutedPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutedPacketData.Merge(m, src)
}
func (m *RoutedPacketData) XXX_Size() int {
	return m.Size()
}
func (m *RoutedPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutedPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_RoutedPacketData proto.InternalMessageInfo

func (m *RoutedPacketData) GetPacketData() map[string][]byte {
	if m != nil {
		return m.PacketData
	}
	return nil
}

// RoutedPacketAcknowledgement is a map of packet acknowledgements that contains separate application specific
// packet acknowledgements for each route
type RoutedPacketAcknowledgement struct {
	PacketAck map[string][]byte `protobuf:"bytes,1,rep,name=packet_ack,json=packetAck,proto3" json:"packet_ack" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RoutedPacketAcknowledgement) Reset()         { *m = RoutedPacketAcknowledgement{} }
func (m *RoutedPacketAcknowledgement) String() string { return proto.CompactTextString(m) }
func (*RoutedPacketAcknowledgement) ProtoMessage()    {}
func (*RoutedPacketAcknowledgement) Descriptor() ([]byte, []int) {
	return fileDescriptor_5edeb5ebd0f9a3d1, []int{2}
}
func (m *RoutedPacketAcknowledgement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutedPacketAcknowledgement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutedPacketAcknowledgement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutedPacketAcknowledgement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutedPacketAcknowledgement.Merge(m, src)
}
func (m *RoutedPacketAcknowledgement) XXX_Size() int {
	return m.Size()
}
func (m *RoutedPacketAcknowledgement) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutedPacketAcknowledgement.DiscardUnknown(m)
}

var xxx_messageInfo_RoutedPacketAcknowledgement proto.InternalMessageInfo

func (m *RoutedPacketAcknowledgement) GetPacketAck() map[string][]byte {
	if m != nil {
		return m.PacketAck
	}
	return nil
}

func init() {
	proto.RegisterType((*RoutedVersion)(nil), "ibc.core.port.v1.RoutedVersion")
	proto.RegisterType((*RoutedPacketData)(nil), "ibc.core.port.v1.RoutedPacketData")
	proto.RegisterMapType((map[string][]byte)(nil), "ibc.core.port.v1.RoutedPacketData.PacketDataEntry")
	proto.RegisterType((*RoutedPacketAcknowledgement)(nil), "ibc.core.port.v1.RoutedPacketAcknowledgement")
	proto.RegisterMapType((map[string][]byte)(nil), "ibc.core.port.v1.RoutedPacketAcknowledgement.PacketAckEntry")
}

func init() { proto.RegisterFile("ibc/core/port/v1/port.proto", fileDescriptor_5edeb5ebd0f9a3d1) }

var fileDescriptor_5edeb5ebd0f9a3d1 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcb, 0x4e, 0xf2, 0x40,
	0x14, 0xc7, 0x3b, 0xf0, 0x5d, 0xc2, 0xf0, 0x7d, 0x4a, 0x1a, 0x16, 0x0d, 0x24, 0x95, 0xb0, 0x62,
	0xc3, 0x8c, 0x60, 0x34, 0xc4, 0xe0, 0x42, 0xa2, 0x6b, 0x49, 0x17, 0x26, 0xba, 0x21, 0xd3, 0xe9,
	0xa4, 0x36, 0xa5, 0x3d, 0x4d, 0x3b, 0xad, 0xe1, 0x2d, 0x7c, 0x10, 0x9f, 0xc1, 0x35, 0x4b, 0x96,
	0xae, 0x8c, 0x81, 0x17, 0x31, 0xbd, 0x80, 0xd8, 0x85, 0x89, 0xab, 0x9e, 0xf3, 0xfb, 0xff, 0x7b,
	0x2e, 0x99, 0x83, 0xdb, 0x8e, 0xc9, 0x29, 0x87, 0x50, 0xd0, 0x00, 0x42, 0x49, 0x93, 0x41, 0xf6,
	0x25, 0x41, 0x08, 0x12, 0xd4, 0x86, 0x63, 0x72, 0x92, 0x8a, 0x24, 0x83, 0xc9, 0xa0, 0xd5, 0xb4,
	0xc1, 0x86, 0x4c, 0xa4, 0x69, 0x94, 0xfb, 0xba, 0x37, 0xf8, 0xbf, 0x01, 0xb1, 0x14, 0xd6, 0xad,
	0x08, 0x23, 0x07, 0x7c, 0x55, 0xc7, 0x7f, 0x3d, 0xb0, 0xe2, 0xb9, 0x88, 0x34, 0xd4, 0xa9, 0xf6,
	0x6a, 0x93, 0x5f, 0xcb, 0xb7, 0x23, 0xc5, 0xd8, 0xc2, 0x54, 0x4f, 0x72, 0xab, 0x56, 0xd9, 0xd7,
	0x0b, 0xd8, 0x7d, 0x46, 0xb8, 0x91, 0x57, 0x9c, 0x32, 0xee, 0x0a, 0x79, 0xc5, 0x24, 0x53, 0xef,
	0x70, 0x3d, 0xc8, 0xb2, 0x99, 0xc5, 0x24, 0xcb, 0x0a, 0xd7, 0x87, 0x43, 0x52, 0x9e, 0x91, 0x94,
	0x7f, 0x24, 0x9f, 0xe1, 0xb5, 0x2f, 0xc3, 0x45, 0xd1, 0x0c, 0x07, 0x3b, 0xdc, 0xba, 0xc0, 0x87,
	0x25, 0x93, 0xda, 0xc0, 0x55, 0x57, 0x2c, 0x34, 0xd4, 0x41, 0xbd, 0x9a, 0x91, 0x86, 0x6a, 0x13,
	0xff, 0x4e, 0xd8, 0x3c, 0x16, 0x5a, 0xa5, 0x83, 0x7a, 0xff, 0x8c, 0x3c, 0x39, 0xaf, 0x8c, 0x50,
	0xf7, 0x05, 0xe1, 0xf6, 0x7e, 0xd7, 0x4b, 0xee, 0xfa, 0xf0, 0x38, 0x17, 0x96, 0x2d, 0x3c, 0xe1,
	0x4b, 0x95, 0xe1, 0xa2, 0xd9, 0x8c, 0x71, 0xb7, 0x18, 0x7c, 0xfc, 0xfd, 0xe0, 0xa5, 0x12, 0x64,
	0x47, 0xf7, 0x57, 0xa8, 0x05, 0x5b, 0xda, 0x1a, 0xe3, 0x83, 0xaf, 0x96, 0x9f, 0x2c, 0x30, 0x99,
	0x2e, 0xd7, 0x3a, 0x5a, 0xad, 0x75, 0xf4, 0xbe, 0xd6, 0xd1, 0xd3, 0x46, 0x57, 0x56, 0x1b, 0x5d,
	0x79, 0xdd, 0xe8, 0xca, 0xfd, 0x99, 0xed, 0xc8, 0x87, 0xd8, 0x24, 0x1c, 0x3c, 0xca, 0x21, 0xf2,
	0x20, 0xa2, 0x8e, 0xc9, 0xfb, 0x36, 0xd0, 0x64, 0x44, 0x8b, 0xe7, 0xcc, 0xef, 0xe7, 0xf8, 0xb4,
	0x9f, 0x9d, 0x90, 0x5c, 0x04, 0x22, 0x32, 0xff, 0x64, 0x97, 0x71, 0xf2, 0x11, 0x00, 0x00, 0xff,
	0xff, 0xd0, 0x84, 0x22, 0x5d, 0x60, 0x02, 0x00, 0x00,
}

func (m *RoutedVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutedVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutedVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		for iNdEx := len(m.Version) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Version[iNdEx])
			copy(dAtA[i:], m.Version[iNdEx])
			i = encodeVarintPort(dAtA, i, uint64(len(m.Version[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Modules[iNdEx])
			copy(dAtA[i:], m.Modules[iNdEx])
			i = encodeVarintPort(dAtA, i, uint64(len(m.Modules[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RoutedPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutedPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutedPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PacketData) > 0 {
		for k := range m.PacketData {
			v := m.PacketData[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintPort(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPort(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPort(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RoutedPacketAcknowledgement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutedPacketAcknowledgement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutedPacketAcknowledgement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PacketAck) > 0 {
		for k := range m.PacketAck {
			v := m.PacketAck[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintPort(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPort(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPort(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPort(dAtA []byte, offset int, v uint64) int {
	offset -= sovPort(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RoutedVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Modules) > 0 {
		for _, s := range m.Modules {
			l = len(s)
			n += 1 + l + sovPort(uint64(l))
		}
	}
	if len(m.Version) > 0 {
		for _, s := range m.Version {
			l = len(s)
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *RoutedPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PacketData) > 0 {
		for k, v := range m.PacketData {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovPort(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovPort(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPort(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RoutedPacketAcknowledgement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PacketAck) > 0 {
		for k, v := range m.PacketAck {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovPort(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovPort(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPort(uint64(mapEntrySize))
		}
	}
	return n
}

func sovPort(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPort(x uint64) (n int) {
	return sovPort(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoutedVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutedVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutedVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = append(m.Version, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutedPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutedPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutedPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PacketData == nil {
				m.PacketData = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPort
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPort
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPort
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPort
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPort
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthPort
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthPort
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPort(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPort
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PacketData[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutedPacketAcknowledgement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutedPacketAcknowledgement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutedPacketAcknowledgement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PacketAck == nil {
				m.PacketAck = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPort
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPort
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPort
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPort
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPort
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthPort
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthPort
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPort(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPort
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PacketAck[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPort(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPort
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPort
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPort
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPort
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPort
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPort
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPort        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPort          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPort = fmt.Errorf("proto: unexpected end of group")
)
