// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/core/port/v1/port.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EncodingType defines the type of encoding used for the packet data
type EncodingType int32

const (
	// UNSPECIFIED is an uninitialized encoding type.
	EncodingType_ENCODING_TYPE_UNSPECIFIED EncodingType = 0
	// PROTOBUF is used for protobuf binary encoding.
	EncodingType_ENCODING_TYPE_PROTOBUF EncodingType = 1
	// JSON is used for JSON encoding.
	EncodingType_ENCODING_TYPE_JSON EncodingType = 2
)

var EncodingType_name = map[int32]string{
	0: "ENCODING_TYPE_UNSPECIFIED",
	1: "ENCODING_TYPE_PROTOBUF",
	2: "ENCODING_TYPE_JSON",
}

var EncodingType_value = map[string]int32{
	"ENCODING_TYPE_UNSPECIFIED": 0,
	"ENCODING_TYPE_PROTOBUF":    1,
	"ENCODING_TYPE_JSON":        2,
}

func (x EncodingType) String() string {
	return proto.EnumName(EncodingType_name, int32(x))
}

func (EncodingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5edeb5ebd0f9a3d1, []int{0}
}

// ModuleVersion defines the versioning scheme used for IBC modules.
type ModuleVersion struct {
	// version is the version string of the module
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// encoding is the encoding type used for the module's packet data
	Encoding EncodingType `protobuf:"varint,2,opt,name=encoding,proto3,enum=ibc.core.port.v1.EncodingType" json:"encoding,omitempty"`
}

func (m *ModuleVersion) Reset()         { *m = ModuleVersion{} }
func (m *ModuleVersion) String() string { return proto.CompactTextString(m) }
func (*ModuleVersion) ProtoMessage()    {}
func (*ModuleVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_5edeb5ebd0f9a3d1, []int{0}
}
func (m *ModuleVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleVersion.Merge(m, src)
}
func (m *ModuleVersion) XXX_Size() int {
	return m.Size()
}
func (m *ModuleVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleVersion.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleVersion proto.InternalMessageInfo

func (m *ModuleVersion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ModuleVersion) GetEncoding() EncodingType {
	if m != nil {
		return m.Encoding
	}
	return EncodingType_ENCODING_TYPE_UNSPECIFIED
}

// Route specifies a module's callback route along with its version information
// to be stored on the routing table
type Route struct {
	// route declared by the module
	Route string `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	// version for the module
	Version ModuleVersion `protobuf:"bytes,2,opt,name=version,proto3" json:"version"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_5edeb5ebd0f9a3d1, []int{1}
}
func (m *Route) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Route.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return m.Size()
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetRoute() string {
	if m != nil {
		return m.Route
	}
	return ""
}

func (m *Route) GetVersion() ModuleVersion {
	if m != nil {
		return m.Version
	}
	return ModuleVersion{}
}

// RoutedVersion will be set for a particular port in order that must be called for channels with the given port
// Note the Routes must be unique
type RoutedVersion struct {
	// ordered list of routes that will be called by port keeper for a given port
	Routes []Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes"`
}

func (m *RoutedVersion) Reset()         { *m = RoutedVersion{} }
func (m *RoutedVersion) String() string { return proto.CompactTextString(m) }
func (*RoutedVersion) ProtoMessage()    {}
func (*RoutedVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_5edeb5ebd0f9a3d1, []int{2}
}
func (m *RoutedVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutedVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutedVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutedVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutedVersion.Merge(m, src)
}
func (m *RoutedVersion) XXX_Size() int {
	return m.Size()
}
func (m *RoutedVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutedVersion.DiscardUnknown(m)
}

var xxx_messageInfo_RoutedVersion proto.InternalMessageInfo

func (m *RoutedVersion) GetRoutes() []Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

// RoutedPacketData is a map of packet data that contains separate application specific packet data
// for each route
type RoutedPacketData struct {
	PacketData map[string][]byte `protobuf:"bytes,1,rep,name=packet_data,json=packetData,proto3" json:"packet_data" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RoutedPacketData) Reset()         { *m = RoutedPacketData{} }
func (m *RoutedPacketData) String() string { return proto.CompactTextString(m) }
func (*RoutedPacketData) ProtoMessage()    {}
func (*RoutedPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5edeb5ebd0f9a3d1, []int{3}
}
func (m *RoutedPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutedPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutedPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutedPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutedPacketData.Merge(m, src)
}
func (m *RoutedPacketData) XXX_Size() int {
	return m.Size()
}
func (m *RoutedPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutedPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_RoutedPacketData proto.InternalMessageInfo

func (m *RoutedPacketData) GetPacketData() map[string][]byte {
	if m != nil {
		return m.PacketData
	}
	return nil
}

// RoutedPacketAcknowledgement is a map of packet acknowledgements that contains separate application specific
// packet acknowledgements for each route
type RoutedPacketAcknowledgement struct {
	PacketAck map[string][]byte `protobuf:"bytes,1,rep,name=packet_ack,json=packetAck,proto3" json:"packet_ack" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RoutedPacketAcknowledgement) Reset()         { *m = RoutedPacketAcknowledgement{} }
func (m *RoutedPacketAcknowledgement) String() string { return proto.CompactTextString(m) }
func (*RoutedPacketAcknowledgement) ProtoMessage()    {}
func (*RoutedPacketAcknowledgement) Descriptor() ([]byte, []int) {
	return fileDescriptor_5edeb5ebd0f9a3d1, []int{4}
}
func (m *RoutedPacketAcknowledgement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutedPacketAcknowledgement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutedPacketAcknowledgement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutedPacketAcknowledgement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutedPacketAcknowledgement.Merge(m, src)
}
func (m *RoutedPacketAcknowledgement) XXX_Size() int {
	return m.Size()
}
func (m *RoutedPacketAcknowledgement) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutedPacketAcknowledgement.DiscardUnknown(m)
}

var xxx_messageInfo_RoutedPacketAcknowledgement proto.InternalMessageInfo

func (m *RoutedPacketAcknowledgement) GetPacketAck() map[string][]byte {
	if m != nil {
		return m.PacketAck
	}
	return nil
}

func init() {
	proto.RegisterEnum("ibc.core.port.v1.EncodingType", EncodingType_name, EncodingType_value)
	proto.RegisterType((*ModuleVersion)(nil), "ibc.core.port.v1.ModuleVersion")
	proto.RegisterType((*Route)(nil), "ibc.core.port.v1.Route")
	proto.RegisterType((*RoutedVersion)(nil), "ibc.core.port.v1.RoutedVersion")
	proto.RegisterType((*RoutedPacketData)(nil), "ibc.core.port.v1.RoutedPacketData")
	proto.RegisterMapType((map[string][]byte)(nil), "ibc.core.port.v1.RoutedPacketData.PacketDataEntry")
	proto.RegisterType((*RoutedPacketAcknowledgement)(nil), "ibc.core.port.v1.RoutedPacketAcknowledgement")
	proto.RegisterMapType((map[string][]byte)(nil), "ibc.core.port.v1.RoutedPacketAcknowledgement.PacketAckEntry")
}

func init() { proto.RegisterFile("ibc/core/port/v1/port.proto", fileDescriptor_5edeb5ebd0f9a3d1) }

var fileDescriptor_5edeb5ebd0f9a3d1 = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x5d, 0x6b, 0xd3, 0x50,
	0x18, 0xc7, 0x73, 0x3a, 0x37, 0xdd, 0xd3, 0x6d, 0x86, 0xc3, 0x98, 0xb5, 0xc3, 0xac, 0xe4, 0xaa,
	0x08, 0x4b, 0x5c, 0x65, 0x32, 0xc6, 0x44, 0xec, 0x9a, 0x4a, 0x05, 0xdb, 0x90, 0x75, 0xc2, 0xbc,
	0xb0, 0x24, 0x27, 0x87, 0x18, 0xda, 0xe6, 0x84, 0xe4, 0x34, 0xd2, 0x6f, 0xe1, 0x07, 0xf1, 0x33,
	0x78, 0xbd, 0xcb, 0x5d, 0x7a, 0x25, 0xd2, 0x7e, 0x11, 0xc9, 0x49, 0xda, 0xf5, 0x05, 0x05, 0xaf,
	0xf2, 0xbc, 0xfc, 0xf3, 0x7b, 0x5e, 0x38, 0x0f, 0x1c, 0xfa, 0x0e, 0xd1, 0x09, 0x8b, 0xa8, 0x1e,
	0xb2, 0x88, 0xeb, 0xc9, 0x89, 0xf8, 0x6a, 0x61, 0xc4, 0x38, 0xc3, 0xb2, 0xef, 0x10, 0x2d, 0x4d,
	0x6a, 0x22, 0x98, 0x9c, 0x94, 0xf7, 0x3d, 0xe6, 0x31, 0x91, 0xd4, 0x53, 0x2b, 0xd3, 0xa9, 0x14,
	0x76, 0x3f, 0x30, 0x77, 0x34, 0xa0, 0x1f, 0x69, 0x14, 0xfb, 0x2c, 0xc0, 0x25, 0x78, 0x98, 0x64,
	0x66, 0x09, 0x55, 0x50, 0x75, 0xdb, 0x9a, 0xb9, 0xf8, 0x1c, 0x1e, 0xd1, 0x80, 0x30, 0xd7, 0x0f,
	0xbc, 0x52, 0xa1, 0x82, 0xaa, 0x7b, 0x35, 0x45, 0x5b, 0xad, 0xa2, 0x19, 0xb9, 0xa2, 0x3b, 0x0e,
	0xa9, 0x35, 0xd7, 0xab, 0x9f, 0x61, 0xd3, 0x62, 0x23, 0x4e, 0xf1, 0x3e, 0x6c, 0x46, 0xa9, 0x91,
	0xc3, 0x33, 0x07, 0xbf, 0xb9, 0x2f, 0x9a, 0x92, 0x8b, 0xb5, 0xa3, 0x75, 0xf2, 0x52, 0x9b, 0xf5,
	0x07, 0xb7, 0xbf, 0x8e, 0xa4, 0x79, 0x6f, 0x6a, 0x13, 0x76, 0x05, 0xdf, 0x9d, 0x8d, 0x71, 0x0a,
	0x5b, 0x02, 0x1d, 0x97, 0x50, 0x65, 0xa3, 0x5a, 0xac, 0x3d, 0x59, 0x07, 0x8a, 0x1f, 0x72, 0x50,
	0x2e, 0x56, 0xbf, 0x23, 0x90, 0x33, 0x90, 0x69, 0x93, 0x3e, 0xe5, 0x0d, 0x9b, 0xdb, 0xf8, 0x06,
	0x8a, 0xa1, 0xf0, 0x7a, 0xae, 0xcd, 0xed, 0x1c, 0x58, 0xfb, 0x0b, 0x70, 0xe1, 0x47, 0xed, 0xde,
	0x34, 0x02, 0x1e, 0x8d, 0xf3, 0x5a, 0x10, 0xce, 0xc3, 0xe5, 0xd7, 0xf0, 0x78, 0x45, 0x84, 0x65,
	0xd8, 0xe8, 0xd3, 0x71, 0xbe, 0x9f, 0xd4, 0x4c, 0x77, 0x96, 0xd8, 0x83, 0x11, 0x15, 0xbb, 0xd9,
	0xb1, 0x32, 0xe7, 0xbc, 0x70, 0x86, 0xd4, 0x1f, 0x08, 0x0e, 0x17, 0xab, 0xbe, 0x25, 0xfd, 0x80,
	0x7d, 0x1d, 0x50, 0xd7, 0xa3, 0x43, 0x1a, 0x70, 0x6c, 0x43, 0x5e, 0xac, 0x67, 0x93, 0x7e, 0xde,
	0xf8, 0xc5, 0xbf, 0x1b, 0x5f, 0x41, 0x68, 0xf3, 0xe8, 0xe2, 0x08, 0xdb, 0xe1, 0x2c, 0x5a, 0xbe,
	0x80, 0xbd, 0x65, 0xc9, 0xff, 0x0c, 0xf0, 0xdc, 0x86, 0x9d, 0xc5, 0x17, 0x83, 0x9f, 0xc1, 0x53,
	0xa3, 0x7d, 0xd9, 0x69, 0xb4, 0xda, 0xef, 0x7a, 0xdd, 0x1b, 0xd3, 0xe8, 0x5d, 0xb7, 0xaf, 0x4c,
	0xe3, 0xb2, 0xd5, 0x6c, 0x19, 0x0d, 0x59, 0xc2, 0x65, 0x38, 0x58, 0x4e, 0x9b, 0x56, 0xa7, 0xdb,
	0xa9, 0x5f, 0x37, 0x65, 0x84, 0x0f, 0x00, 0x2f, 0xe7, 0xde, 0x5f, 0x75, 0xda, 0x72, 0xa1, 0x6e,
	0xde, 0x4e, 0x14, 0x74, 0x37, 0x51, 0xd0, 0xef, 0x89, 0x82, 0xbe, 0x4d, 0x15, 0xe9, 0x6e, 0xaa,
	0x48, 0x3f, 0xa7, 0x8a, 0xf4, 0xe9, 0x95, 0xe7, 0xf3, 0x2f, 0x23, 0x47, 0x23, 0x6c, 0xa8, 0x13,
	0x16, 0x0f, 0x59, 0xac, 0xfb, 0x0e, 0x39, 0xf6, 0x98, 0x9e, 0x9c, 0xe9, 0x43, 0xf1, 0xdc, 0xe2,
	0xec, 0xc0, 0x5e, 0x9c, 0x1e, 0x8b, 0x1b, 0xe3, 0xe3, 0x90, 0xc6, 0xce, 0x96, 0x38, 0x9d, 0x97,
	0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xfa, 0xf3, 0x56, 0x81, 0x03, 0x00, 0x00,
}

func (m *ModuleVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Encoding != 0 {
		i = encodeVarintPort(dAtA, i, uint64(m.Encoding))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPort(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Route) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Route) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Version.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPort(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Route) > 0 {
		i -= len(m.Route)
		copy(dAtA[i:], m.Route)
		i = encodeVarintPort(dAtA, i, uint64(len(m.Route)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoutedVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutedVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutedVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPort(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RoutedPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutedPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutedPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PacketData) > 0 {
		for k := range m.PacketData {
			v := m.PacketData[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintPort(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPort(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPort(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RoutedPacketAcknowledgement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutedPacketAcknowledgement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutedPacketAcknowledgement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PacketAck) > 0 {
		for k := range m.PacketAck {
			v := m.PacketAck[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintPort(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPort(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPort(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPort(dAtA []byte, offset int, v uint64) int {
	offset -= sovPort(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ModuleVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPort(uint64(l))
	}
	if m.Encoding != 0 {
		n += 1 + sovPort(uint64(m.Encoding))
	}
	return n
}

func (m *Route) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Route)
	if l > 0 {
		n += 1 + l + sovPort(uint64(l))
	}
	l = m.Version.Size()
	n += 1 + l + sovPort(uint64(l))
	return n
}

func (m *RoutedVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *RoutedPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PacketData) > 0 {
		for k, v := range m.PacketData {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovPort(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovPort(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPort(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RoutedPacketAcknowledgement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PacketAck) > 0 {
		for k, v := range m.PacketAck {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovPort(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovPort(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPort(uint64(mapEntrySize))
		}
	}
	return n
}

func sovPort(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPort(x uint64) (n int) {
	return sovPort(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ModuleVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoding", wireType)
			}
			m.Encoding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encoding |= EncodingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Route) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Route: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Route: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Route = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutedVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutedVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutedVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutedPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutedPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutedPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PacketData == nil {
				m.PacketData = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPort
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPort
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPort
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPort
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPort
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthPort
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthPort
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPort(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPort
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PacketData[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutedPacketAcknowledgement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutedPacketAcknowledgement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutedPacketAcknowledgement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PacketAck == nil {
				m.PacketAck = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPort
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPort
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPort
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPort
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPort
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthPort
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthPort
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPort(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPort
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PacketAck[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPort(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPort
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPort
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPort
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPort
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPort
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPort
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPort        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPort          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPort = fmt.Errorf("proto: unexpected end of group")
)
